US	53057024	R1OUIIYGHOPE9C	0812695461	369517785	Frege's Lectures on Logic: Carnap's Jena Notes, 1910-1914 (Full Circle)	Books	5	8	8	N	N	Watch the spark of knowledge arc between two great minds	Imagine discovering Aristotle's lecture notes on a class he took from Plato.   This book is very nearly as momentus, and no doubt scholars 2,000 years from now will be studying with as much interest as we're reading it today. <br /> <br />The introductory material is quite enlightening: not only does it explain Frege's bizzaro 2D notation for his system of logic, it also gives many anecdotes about what Frege was like as a person and what it would have been like to be a student in his class.  <br /> <br />Frege is credited with the first real substansive advance in logic since Aristotle, and Carnap was really kicked into a higher orbit after taking this class, going on to become a towering figure in 20th Century philosophy.  This book provides fascinating view into one of the most important logic classes which took place last century.	2005-06-09
US	53057024	R9KGETZL559HR	020172684X	635698870	Bundle of Algorithms in C++,  Parts 1-5: Fundamentals, Data Structures, Sorting, Searching, and Graph Algorithms (3rd Edition) (Pts. 1-5)	Books	5	21	24	N	N	If you want to _really_ understand red-black trees.....	Any professional programmer would benefit from having these books at hand.  Excellent discussions of the basic algorithms which every programmer needs to know.  <br /> <br />But I would like to particularly highlight the discussions on binary and n-ary search trees.  The most enlightening discussion in print, giving the reader a real synoptic view of search tree algorithms, how they evolved, and their culmination in red-black trees.   <br /> <br />Other reviewers have mentioned that the algorithms as presented here seem to be just warmed=over versions of their C counterparts presented in the C edition of this work.  There is a germ of truth to this, but I really don't consider it to be a valid criticism of the books.  The point here is not to present C++ coding techniques, but to understand algorithms.   If you want to know what a state-of-the art C++ implementation of Red-Black trees looks like, just read the source code which comes with the GNU compiler toolchain.  But you're not going to have a prayer of understanding it until you first understand how Red-black trees work--that's where this book comes in.  If you are trying to explain the Red-black tree algorithm, you don't want all of the C++ do-dads and optimizations, templates, etc, all cluttering up the presentation of the skeletal algorithm.	2005-06-07
US	53057024	R3P3FALWJIPT8R	0805303340	479176660	Natural Language Understanding (2nd Edition)	Books	4	37	40	N	N	Before the invasion of the statisto-weenies, there was....	Last week, I was looking at the back flap of this book, and I saw something so shocking that I started choking on my pretzels!  My wife, after slapping me on the back till I stopped choking, glanced down at the page--filled with bizzare symbols--and said, \\"How shocking could that page possibly be???\\"      Well, I  was looking at a list abbrieviations of the categories (parts of speech) which the book used, and I noticed, for the first time after owning this book for over 10 years, that there was no abbriviation for \\"conjunction\\" listed.  And indeed, after consulting the index and looking through the book, it is plain to see that this book doesn't treat conjunction at all!    I have many fond memories of this book--it is the book which my beloved professor at grad school taught me NLP from, and indeed, it contains far more information about NLP than most of its successors.  For example, this book gives perhaps the best discussion of quantifier scope ambiguities of all the major NLP textbooks.  (cf. with Jurafski and Martin's book, which devotes about 1/2 a sentence to quantifier scope ambiguities).     But it has odd ommissions, one of which is the lack of treatment of conjunction/disjunction.  After devoting so much time to quantifier scope, why does Allen leave me in the dark about  whether \\"Every woman\\" can take scope over \\"a man\\"  in the sentence \\"A man and every woman hug each other?\\"  Does that scope differently from \\"Every woman and a man hug each other?\\"  Or what about \\"Every woman and her mother fight?\\"  Can that mean \\"Every woman fights with her mother\\" or are we to look for another antecedient for \\"her\\"?    Or again, Allen's treatment of prolog-esque definite clause grammars.  Allen deserves major kudus here for including them.  Its obvious that he comes from the LISP side of the tracks, and most LISPy books on NLP ignore DCG's altogether (Norvig's \\"Paridigms of AI programming\\" being a notable exception).  But it seems almost like Allen goes out of his wayto present DCGs in the most unattractive light possible.  Prolog has a nice syntactic sugar which makes a DCG look almost exactly like a context-free grammar specification, but you'd never know that if you only read this book--Allen chooses a wierd way to translate strings into clauses, which implies a bizzare-looking prolog grammar for them.  The student naturally recoils in horror, but unless she reads a prolog-oriented book on NLP, she would never know how much easier DCGs are to program than ATNs or the bottom-up parsing methods which Allen goes on to expostulate.    Since this book was published, the field of NLP has taken a bit of a side-track through statistical learning of grammars--the thought being that, well, we really don't know how to do knowledge representation or pronoun resolution very well, so lets all spend a decade or so on how to induce grammars from corpora.  This book doesn't cover any of this research, but frankly, I really don't consider that a critique of the book.  Because now that grammar induction has been done to death, we're right back where this book leaves off--computers can parse sentences all right: heck, these days, computers can even assign numbers between 0 and 1 to parse trees-- but can computers UNDERSTAND sentences?    I would love to see a 3rd edition of this book, and I'm sure I'm not alone.  What I'd like to see it cover is (surprise surprise) conjunction/disjunction, discourse representation theory, underspecification, and a more meaty discussion of knowledge representation and inference.  Also, a few chapters on natural language generation would be nice, as well as discussions on dialogue.  Skip the sections on ATNs and other parsing methods which are only of historical interest now.    Flaws and all, this book is beloved of generations of NLP researchers and is still indispensible, after all these years.	2005-05-25
US	53057024	R3TZ2WND46DZHW	0262660938	107421203	Events in the Semantics of English: A Study in Subatomic Semantics (Current Studies in Linguistics)	Books	5	5	5	N	N	Very lucid explanation and extension of neo-Davidsonianism	It might seem a bit eccentric to be writing a review of this book--considering that at this writing, there is only 1 used copy available, priced at around US$150.00   But whoever buys that copy will be getting a bargain--I wouldn't part with my copy for 10 times the price. <br /> <br />Parsons here gives us probably the most lucid explaination of event-based semantics ever written.  Very in-depth discussions of why an event-based semantics is the way to go, and a careful examination of the various objections which have been raised against it.   <br /> <br />The only critique of this book I have is that Parsons tries in places to \\"go too far\\".  While event-based semantics works great for things that happen (stabbings, runnings, etc) further investigation in these areas has convinced me that trying to use event-based semantics for attributes like being green or states like being on the grass, etc, just arn't apropos.  <br /> <br />Despite this drawback, Parsons book is a must-read for everyone interested in natural language processing or semantic linguistics.  Parsons has somehow managed to write a book which doesn't have to compromise on formal rigor in order to be lucid.  Indeed, he presents a very substantial fragment of English, called \\"Eventlish\\" which is a formally-defined subset of English which is amenable to event-based methods.  <br /> <br />I would very much hope Parsons would come out with a second edition of this work, or would otherwise convince the publisher to do an additional printing.   Lets hope that by the time you read this, someone else hasn't bought the only copy left for sale :-)	2005-05-22
US	53057024	RII0W7WPIV7VQ	0679736247	457710988	The Book of J	Books	5	58	61	N	N	There is yet more to learn about those old stories!	If you have a King James version of the Bible,  the next time you read Genesis, pay attention to how God is referred to.  Sometimes He's called \\"God\\" and sometimes He's called \\"The Lord\\".  The reason for this is that the original Hebrew text uses two different names for God, and the translators were careful to preserve this.  When the Hebrew text uses \\"Elohim\\" it is translated as \\"GOD\\".  When the Hebrew text uses \\"Yahweh\\", it is translated as \\"The Lord\\".    If you carefully read Genesis, you'll notice that when Genesis refers to God as \\"Yahweh\\", he seems to be very different than when he is refered to as \\"Elohim\\".  For example, Elohim is invisible--he never appears to anybody nor can he be seen by anybody--but Yahweh talks face-to-face with people all the time: with Abram, to Jacob, and to Moses and the 40 elders.  Elohim seems remote and regimented, whereas Yahweh comes across as mischevious and irrascible.  This has prompted some to propose the so-called \\"Documentary Hypothesis\\" which posits that Genesis was formed by editing together two or more different books, each book using a different word for God and each book presenting a different picture of who God was and what He was all about.      The book of J is the hypothasized book which used 'Yahweh\\" as the name of God.  Scholars try to reconstruct this book by bringing together all of the passages in the first 5 books of the Bible which refer to God as \\"Yahweh\\".  The result is startling: the same stories you've heard all your life (The tower of Babal, Joseph going to Egypt, Abram bargaining with God over Sodom and Gomorrah), when read together like this, take on a whole different level of meaning.      This book provides two things in one handy volume: it provides a reconstruction of the book of J, freshly translated by David Rosenberg, and it also provides an extended commentary by Harold Bloom, who is certainly the best reader alive today, and who is uniquely qualified to serve as a tour guide through the experience of reading J.  So to review the book I'd like to review each of these seperately.    First, Rosenberg's translation.  To illustrate just how good it is at bringing things out of the text which you ordinarly wouldn't notice, I'd like to quote from his translation of the story of the Tower of Babal: \\"We can bring ourselves together\\" they said \\"like stone on stone, use brick for stone: bake it until hard.\\"  For morter they heated bitumen.    Notice how this translation brings out the parallelism between the tower of Babal and human society:  The tower is made out mud bricks bound by bitumen, and society is made out of people bound by language.  But people are also just made out of mud--recall the creation story where Yahweh breathes the breath of life into mud.  Baking the mud into bricks is symbolic of the people making themselves hard, and using bitumen for morter is symbolic of them using language and government to  organize themselves.   Rosenberg's translation makes available to us many of the puns and wordplay which other English translations unfortunately lose.    Now, to review Bloom's commentary.  Scholarly types are fond of dising Bloom for his tendency to be speculative, to use his imagination to illuminate the reading of the text.  But what they are forgetting is that J is a bunch of stories, written for us to experience!  To use an parable of Rorty's, its like a surgion describing your wife as a bunch of tissues and organs vs. describing your wife as  warm and loving, important person in your life. Yes, \\"warm and loving\\" arn't medical terms, but that doesn't make them a bad description of your wife.      Also, the very greatest literature, such as J is, will admit of more than one reading, more than one interpretation, more than one point of view.  Bloom here does us excellent service by showing us his point of view on the text, telling us how the experience of reading the text impacts him.  The author of J didn't write J just to chronicle some historical figures--the author of J wrote J so that we could read it, and by reading it, become changed into new people.  _This_ is the aspect of experiiencing J which Bloom's commentary helps along, and this is the aspect which critics of Bloom's commentary are missing the most.	2005-05-08
US	53057024	R3NPFEOLME31NW	0387948686	488154134	An Introduction to Kolmogorov Complexity and Its Applications (Texts in Computer Science)	Books	5	93	94	N	N	Biggest return for the biggest investment	This was the second-hardest book I ever read.  Honestly, it took me years and years to get through it.  I even had to buy a 2nd copy, because I kept getting frustrated and throwing the first copy across the room until it was destroyed.  So yes, this book requires a substantial effort to read.<br /><br />But the payback!!  I've gotten more return on investment from this book than from any other book I've ever read.  If you dilligently read and master this book, you will be able to analyze and solve problems your collegues just can't.<br /><br />The basic idea behind Kolmogorov complexity is straighforward: a good measure of the complexity of an object is the length of the shortest computer program which will construct that object.  From this basic idea an amazing variety of insights and powerful techniques have been developed, and this book is quite comprehensive in cataloging and explaining them.<br /><br />For computer scientists and working programmers, probably the most useful result of Kolmogorov complexity would be the \\"Incompressibility Method\\", which is a powerful technique for the analysis of the runtime of algorithms.  Typically, it is relatively easy to figure out what the best case or the worst case runtime of an algorithm is.  Until now, it was hard to calculate the average runtime of an algorithm, because it usually involved a tricky counting problem, to enumerate all possible runs of the the algorithm and summing over them.  The incompressibility method eliminates the need for doing these complicated enumerations, by letting you perform the analysis on a single run of the algorithm which is guarunteed to be representative of the average runtime of the algorithm.  If you program for a living like I do, this will give you an edge, because if you can accurately predict that the worst-case runtimes almost never happen, you can usually simplify and streamline your programs by optimizing it for the average case.  If your competitors are wasting time optimizing for a worst case which almost never happens--at the expense of _not_ optimizing for the average case, you win bigtime.<br /><br />For philosophers of science and AI/knowledge representation folks, the most useful results of Kolmogorov complexity are probably the contributions of Kolmogorov complexity to Baysianism.  To be a Baysian is to follow a two step process: (STEP 1) for every possible sentence, assign to it a number between 0 and 1 which represents how certain you are that that sentence is true.  This initial assignment should be a probability distribution over all possible sentences.  It should be a \\"good\\" probability distrubution, but of course it won't be perfect, since you don't know everything.  (STEP 2) when confronted with new evidence, e.g. an observation, update your current \\"good\\" degrees of belief by using Bayes' law, to yield a new \\"better\\" set of degrees of belief.<br /><br />The Baysians always had a good story for Step 2--just use Bayes law.  But until now, they were mostly hand-waving on Step 1--what would constitude a \\"good\\" initial probability distribution?  There were many proposals (e.g. maximum entropy) but all proposals had benefits and drawbacks.  What Kolmogorov complexity provides is the so-called \\"universal\\" distribution, which is guarunteed to be a \\"good\\" initial distirbution.  This book devotes much time to explaining and exploring this, and shows how previous techniques, like maximum entropy, minimum description length, etc all can be seen as computable approximations to the (unfortunately uncomputable) universal distribution.  This really gives a nice framework for evalutating and formulating good prior distributions.<br /><br />After remarking on how hard this book was to read, I should emphasize that this is not due to bad writing on the part of the authors!  Indeed, after throwing the book across the room, I was always drawn back by Li & Vitanyi's most engaging writing style to pick the book back up, dust it off, and have another go at it.  If it were not for their wonderul ability to expain a very complicated subject matter, I never would have gotten through it.<br /><br />An unsung hero of this book is Peter Gacs, who wrote a set of lecture notes which really could be considered to be an Urtext for this book.  If you tackle this book, I highly recommend that you also get ahold of these notes, because it is sometimes very useful, when trying to puzzle out a difficult argument, to get another description/explaination of it from a different point of view.  These notes are available on the web, just google for \\"Lecture note on descriptional complexity and randomness\\" by Peter Gacs.<br /><br />If you're up to the challange, then buy this book, dilligently read it, swear at it--then swear by it.nother go at it.  If it were not for their wonderul ability to expain a very complicated subject matter, I never would have gotten through it.<br /><br />An unsung hero of this book is Peter Gacs, who wrote a set of lecture notes which really could be considered to be an Urtext for this book.  If you tackle this book, I highly recommend that you also get ahold of these notes, because it is sometimes very useful, when trying to puzzle out a difficult argument, to get another description/explaination of it from a different point of view.  These notes are available on the web, just google for \\"Lecture note on descriptional complexity and randomness\\" by Peter Gacs.<br /><br />If you're up to the challange, then buy this book, dilligently read it, swear at it--then swear by it.	2005-05-07
US	53057024	R21AHKFRQ35NHH	012229064X	534669567	3D Game Engine Architecture: Engineering Real-Time Applications with Wild Magic (The Morgan Kaufmann Series in Interactive 3D Technology)	Books	5	19	26	N	N	Best documentation for a software architecture ever written?	I don't know if this book the best documentation of a software architecture ever written, but its gotta rate up there.  Probably its only rivals would be some of the foundational papers about the design of UNIX. <br /> <br />Why are there so few good contenders?  Well, the genre of documentation for software architecture is a demanding one, because you need to master of so many skills in order to do it right.  What makes it even harder is that the codebase is always changing in response to bugfixes and enhancements, which puts the documentation in continual jeopardy of drifting away from the codebase it describes. <br /> <br />Yes, this volume is a bit more plodding than Eberly's usual effortless writing style, but remember, he's documenting a software architecture, which is an inherently plodding task.  Its ploddinghood is therefore a feature, not a bug.  Moreover, he is never gratuitously plodding.    <br /> <br />f you want to be a great documentor of software architectures, then pay close attention to the techniques Eberly uses here.  Notice how, by casting the documentation in a tutorial form, he simultaniously makes it (1) a much more interesting read, and (2) makes it a dual-use document, invaluable both to newbies getting up to speed and to old pro's wanting to refresh their memory. <br /> <br />Budding game engine developers will find this book invaluable, but they are not the only ones who would benefit from reading it.  This book could be profitably used in a general software architecture class, as an example of how to really document a software architecture.   <br /> <br />In addition, a game engine's architecture is a superset of many other software architectures.  For example, someone who is building a large-scale CAD system, or an EDA package, or an event-driven simulation package, or a physics simulation package, would also save themselves from many unanticipated \\"gotchas\\" by giving this book a close read.	2005-04-26
US	53057024	R2A9NZTUCVRQ70	0974514055	510267474	Programming Ruby: The Pragmatic Programmers' Guide, Second Edition	Books	4	149	156	N	N	Do I really have to learn _another_ programming language :-)	If you are like me, a busy programmer, I know you are wondering when you hear about Ruby, \\"Do I really have to learn yet another programming language?\\"  I mean, Java, C#, Python?  When will it ever end?    Well, it ends when you die, and yes, you do have to learn another programming language :-)  But you'll like Ruby, I promise.  Things I like about Ruby:    0.  As easy to write scripts in as Perl, but it really scales.    1.  Exceedingly self-consistent.  Ruby has fewer syntactic warts than any programming language I'm familier with.  All the features hang together very nicely.    2.  Duck Typing: If you use a variable like a string, its a string.  If you use it like a float, its a float.  If you are familier with Haskell or or similarly typed languages, you get the idea.  Ruby gives you about 80% of what Haskell gives you here.    3.  Nice module system.   This implements a nice mix-in facility--which gives you the power of C++ templates, with more structure.  Also eliminates the need for multiple inheritance.    4.  Wacky features like call/cc for the true language freaks.    Oh, so you want to know about the book too?  Well, I agree with some of the reviewers here who describe the book as less of a tutorial/visionary screed/inspiring gospel and more of a reference manual.  But I don't think this is a fair critique of the book.  Back in the 60's, before the internet, a language needed a book to do for it what K&R did for C, or what Clocksin & Mellish did for prolog.      But today, you learn about a language by surfing the web.  Instead of just duplicating what is available on the internet, this book complements the web, by supplying in a nice portable package what you need to know about Ruby which _can't_ be (easily) gotten from the web.  Its a \\"post-internet\\" volume in this fashion.    Really the only critique of the book I can offer is that its description of Ruby/TK, the default GUI programming library for Ruby, is a bit abrieviated.  It gives you the basicsand the refers you a book about Perl/TK for the details.  Please guys, in the next edition expand on this!    Ruby is a language which is as object-oriented as smallTalk, as flexible as Scheme, has the scriptibility of Perl, and a nice C-ish syntax.  What's not to like?   This book is the book to buy if you decide to learn Ruby.	2005-04-24
US	53057024	R2LL0EO8J2DG5L	1558601910	542059966	Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp	Books	5	86	91	N	N	Norvig's Corollary to Greenspun's Tenth Law of Programming	This book has been called \\"The best book on programming ever written\\".  I'd have to agree--it is certainly the best that I've ever read.     William Zinsser said, \\"The essence of writing is rewriting\\" and the same can be said for writing computer programs.  Norvig's book presents this process--how the limitations of a program are overcome by revision and rewriting.    What sets Norvig apart as a writer is that, amazingly enough, he can write about debugging (the most dreaded part of computer programming) and make it a fascinating read!    Lisp has been getting a higher profile lately because of essayists like Paul Graham and Philip Greenspun; in particular,  Greenspun's Tenth Rule of Programming which states: \\"Any sufficiently complicated C or Fortran program contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp.\\"   So, should this book be read as an exhortation to return to Lisp as the preferred programming language?    Paradoxically, I think not.  One third of the way through the book, Norvig shows us how to implement Prolog in Lisp.  From then on out, most of the AI techniques he presents either directly use Prolog instead of Lisp (such as his excellent discussion of natural language processing using Prolog) or use Prolog as a base to build on (such as his discussions on knowledge representation).      From this we can abstract what I'd like to call Norvig's Corollary to Greenspun's Tenth Law of Programming: \\"Any sufficiently complicated LISP program is going to contain a slow implementation of half of Prolog\\".  I'm leaving out the \\"ad hoc\\", \\"bug-ridden\\" part of Greenspuns's law, because Norvig's programs are neither.  But it is quite remarkable the degree to which, once having absorbed Prolog, Norvig uses Prolog as the basis for further development, rather than Lisp.      Is this a book about Prolog then?  Again, no.  What is the take-away message?  It is this: as our world becomes more and more complex, and as the problems which programmers are facing become more and more complex, we have to program at a higher and higher level.     Norvig does not stop at just embedding Prolog in Lisp.  He also shows us how to embed scheme as well.  Excellent discussion on the mysterious call/cc function and on continuations.      In a capsule review, it is impossible to really give an overview of a 1,000 page book like this one.   But the scope and heft of the volume really needs to be commented on: the programs presented in this book are like basis vectors, the totality of which nearly span the space of programming itself.   In no way should this be considered \\"just an AI book\\" or \\"just  a LISP book\\".  This book transcends language, time, and subject matter.  It is a programmer's book for the ages.	2005-04-23
US	53057024	R2K89E3LAZUXQD	1882423100	31941381	Effective Phrases for Performance Appraisals: A Guide to Successful Evaluations(10th Edition)	Books	1	22	45	N	N	A Non-Manager Reviews this book	If you are a manager, please take 5 minutes and read what I have to say here.  If you are looking for a great way to typecaste a year's worth of work that your employee's have given you, then this is your book.  Just flip it open to any page, thow a few darts at it, pick the phrases the darts land on, and voila!  You're done! You don't have to worry about those pesky performance reviews for another whole year!  Whew! <br /> <br />I know performance reviews are something you dread.  I know you are overworked--after this much \\"rightsizing\\" everybody is doing at least 3 people's jobs.  I know you don't want to spend a lot of time doing this. <br /> <br />But when I read the other reviewers who are exulting that \\"I just saved 5 hours worth of time\\" on their employee's reviews, it really saddens me.  I mean, we're talking about summarizing a year of someone's life--time they have spent for *you*, time they have taken away from themselves and from their family.  If you are going to comment on someone's performance for a whole year, isn't it worthwhile to take a few hours and really think about it?  And don't they deserve more from you than just a rattle-off of pointy-haired-boss-speak? <br /> <br />I think books like this do a tremendous disservice to business.  By encouraging managers to reduce performance reviews to a paint-by-numbers process, and by letting them  \\"get it over with asap\\", it really weakens a line of communication between manager and employee which ought rather to be strengthened.   <br /> <br />If you use this book, you will cheapen and debase your relationship with your employees.  Instead of using someone else's words, give your employee's your own words--they will recognize and respond to the genuineness and will be far more motivated to give you their best.	2005-04-18
US	53057024	R28CA2TAHB2GLQ	1567504345	243115432	Learning to Build and Comprehend Complex Information Structures: Prolog as a Case Study (Contemporary Studies in Cognitive Science and Technology)	Books	5	2	2	N	N	The most unlikely book ever to be published	This is a wonderful book for many reasons, but the biggest wonder was that it was ever published!  It documents obscure research about an obscure programming language--and the point of the research is to find out why it is so obscure! <br /> <br />If you are a big fan of prolog, but are still wondering why it didn't take off, this book will tell you.  For me, the biggest take away messages are these: <br /> <br />1.  The very uniformity of the syntax--which makes Prolog \\"beautiful\\" in a sense--is a source of obscurity, because since everything is just clauses, its hard to tell what any particular clause is doing.  In, say, C, its easy to tell if something is a for-loop or not--the keyword \\"for\\" is right there.  But in prolog, iteration over a range of values looks pretty much like any other programming statement.  There is no syntactic differentiation to help you understand the semantics. <br /> <br />2.  In order to understand a prolog program, you pretty much have to be a master of redaction criticism.  For example, a prolog program to sum up the values of all the integers in a list of integers is typically written by taking the code for the member/2 function and editing it--adding here an accumulator, there a summation, etc.  This is called  \\"Skeletons and Techniques\\" by Lee Naish and other exponents.  It is a very powerful way to develop prolog programs, but someone else wanting to understand _your_ prolog program must first understand how member/2 works, then they must work backwards from the changes you've made to it, first determining how you've edited member/2 and what your editorial changes mean, before they can understand your code.  Its very tricky! <br /> <br />Talk about a book which isn't for everyone!  But if you are in the business of designing languages, there's lots of interesting insights here just waiting to be gleaned.	2005-04-17
US	53057024	R38VKURYE07ELV	0679734465	131170192	Valis	Books	5	2	2	N	N	Fascinating look at what was to become silicon valley	I think most of the previous reviewers have done a good job of covering the book itself, so in this review I'd just like to point out a couple of things:    1.  If you are intereseted in what silicon valley was like BEFORE the sucessions of booms and busts happened, this is a good resource.  Dick here wonderfully captures the essance of a time gone by.     2.  Dick's whole 2-3-74 experience started whe he saw what he describes as an other-wordly, pink light, utterly unlike any other light he had seen before.  I wonder, did perhaps a few precoccious engineers-to-be in the valley cobble together a homemede laser and play pranks on unsuspecting passersby?	2005-04-05
US	53057024	RSVU0TTQ7JJPU	0521793823	160275904	Donald Davidson (Contemporary Philosophy in Focus)	Books	5	9	9	N	N	Finally! An in-depth, comprehensible intro to Davidson	NOTE TO READER:  Unfortunately, due to a glitch in Amazon's review system, you can read this review from two different books:    The right book:  Donald Davidson (Contemporary Philosophy in Focus) edited by Kirk Ludwig  The wrong book:  Donald Davidson: Meaning, Truth, Language, and Reality written by Leport and Ludwig.    Although I recommend both books, this review is for the first book.    Davidson's philosophy is very systematic, but very unsystematically presented.   It has only been available in bits and pieces--an essay here, an interview there, perhaps some conference proceedings, etc.   Getting the big picture was almost as hard as studying a pointalistic painting under a microscope--each dot was there, but how do they form a coherent whole?    This circumstance makes the appearance of this book quite fortunate indeed.  Each chapter is written by first-rate philosophers who can do a first-rate job of presenting Davidson's philosophy to a newbie audience.    A note of caution: as I'm sure the authors themselves would agree, reading this book is NOT a substitute for reading Davidson's essays.  This book isn't a substitute for Davidson, but a wide and accessible road which leads to Davidson.  After reading this book you will be able to understand and confront Davidson's essays directly--an experience which has profoundly affected even very great philosophers such as Quine and Rorty.	2005-03-31
US	53057024	R3QC88H77V6EOV	0521663504	473148753	Purely Functional Data Structures	Books	5	156	157	N	N	An elegant book	Okasaki's slim volume is one of the best expositions on implementing data structures & algorithms in a functional language.  After taking an introductory course on functional programming, this would be the book which tells you where to go next. <br /> <br />This book doesn't just present a rehash/rewrite of imperative data structures, only written in a functional language.  Instead, Okasaki makes sure to emphasize benefits which only functional programming can bring to the table.  For example, many functional data structures can compactly represent not just their current state, but all of their past states as well--a feature called \\"Persistence\\".  Also, functional newbie programmers might be wondering why lazy vs. strict programming is a big deal, and Okasaki shows clearly where data structures can benefit from either being lazy or being strict. <br /> <br />For the advanced reader, Okasaki also presents several powerful techniques for analyzing the runtime of algorithms, including the so-called \\"Banker's Method\\" and the \\"Physicist's Method\\" for analyzing amortized algorithms.   <br /> <br />I hope that Okasaki comes out with a 2nd edition of this book; there is one missing piece in particular which I really wish he would have included:  Although he presents an EXTREMELY lucid description of how to implement Red-Black trees in a functional language, he only presented algorithms for insertion and querying.  Of course, deletion from a red-black tree is the hardest part, left here, I suppose, as an exercise to the student.  If you want to supply this missing piece yourself, check out a paper by Stefan Kars, \\"Red-black trees with types\\", J. Functional Programming 11(4):425-432, July, 2001.  It presents deletion routines, but you'll still want to read Okasaki's book first, for unless you're very much smarter than me you won't be able to understand Kars' paper until you read Okasaki's exposition of red black trees. <br /> <br />Finally, this book is not just useful for programmers in functional languages; logic programmers, using prolog or a varient, will also find this book very helpful, because most of the techniques (all of the techniques, really, with the exception perhaps of the lazy programming stuff) can be directly applied in a prolog programming setting as well.   <br /> <br />After reading this book and implementing some of the data structures for yourself, you'll be amazed at how fast algorithms can run, even when written in a functional language!	2005-03-30
US	53057024	R1E02LI2VE1RWC	0201180537	674384942	Natural Language Processing in PROLOG: An Introduction to Computational Linguistics	Books	2	3	3	N	N	An antique--look elsewhere	Although it is the opinion of this reviewer that if you are doing NLP you should be doing prolog, this isn't the best book for the task.  Look instead to \\"Prolog and Natural-Language Analysis\\" by Pereira & Shieber, or \\"Natural Language Processing for Prolog Programmers\\" by Michael A. Covington. <br /> <br />When Patrick Blackburn & Johan Bos's new book comes out, it will be the one to buy.	2005-03-29
US	53057024	R1IKK33CE5ID95	0521276438	36616380	Lexical Semantics (Cambridge Textbooks in Linguistics)	Books	5	15	15	N	N	An elegant exposition of how semantics is done	A mature science, like Physics, has a panoply of formalisms, apparati, and methods for making epistemic progress.  But in a newer science, like semantics, how do you even get off the ground?    Cruse here provides a marvelous exposition of the methods employed by semanticists, and some results obtainable from them.  His intellectual honesty is such that he never claims more for them than what is warrented--he never tried to make too much stew from one oyster.  There are vast areas of semantics and linguistics which just can't be formalized.  But Cruse here shows us how at least to get started.    The approach he describes is one he calls a \\"contextual\\" approach--\\"the semantic properties of a lexical item are fully reflected in appropriate aspects of the relations it contracts with actual and potential contexts\\".  Astute readers will note the perhaps surprising agreement here between Cruse and Quinian Holism.   To get a grip on the meaning of a word, the best way is to systematically examing sentences which contain that word, and see if the sentences seem intuitively \\"wrong\\" somehow or \\"right\\".      For example, it tells us something about the meaning of the word \\"light\\" that the sentnece \\"It was too light for me to lift\\" seems wrong somehow.  Certain readers might at first consider this intuition-based method to be hopelessly unscientific, but as Cruse points out, every measurement, at some point, depends upon human judgements--e.g. when measuring temperature, you have to judge which line on the thermometer is closest to the mercury.  Indeed, that is what a measuring device does--makes quantities easier to make judment calls about.  A great insight.   Cruse developes analogous \\"measuring instruments\\" to help with investigating what words mean.  Again, Cruse's intellectual honest is such that he never presses these too far, and he always fully respects the limits of these tools.    Using these tools, Cruse then goes on to examine several ways in which words can be related to each other.  These are:     Taxonomical relations -- if fido is a dog, then he _is_ an animal, he _might_ be a poodle, but is _not_ a cat.    Meronomies -- a finger is part of a hand, but not a subset of a hand.    opposites --  if something is hot, it is not cold    and many others.  Always clearly written, always clear about the limitations, this book should be on the shelf of every semanticist.    This book could also be profitably read as a case study in an advanced course on philosophy of science, showing how to extract scientifically useful information from an as-yet-unformalizable body of knowledge.   Highly recommended.	2005-03-29
US	53057024	R5WYCHZ7K1111	0792310284	297173826	From Discourse to Logic: Introduction to Modeltheoretic Semantics of Natural Language, Formal Logic and Discourse Representation Theory (Studies in Linguistics and Philosophy)	Books	5	19	19	N	N	Necessary reading: Still the best intro to DRT	Although written a while back, this is still necessary reading for those interested in computational linguistics, because it is still the best introduction, discussion, and reference for an important semantic theory: Discourse Representation Theory (DRT).    Unlike the semantic theories which came before, DRT takes seriously the fact that in natural language, sentences arn't understood in isolation, but in context.  Each sentence is understood in light of the previously uttered sentences, and adds its own information to an evolving set of knowledge.       To track this dynamically evolving information, DRT introduces a unique data structure called a \\"Discourse Representation Structure\\" or DRS.  The DRS consists of a set of known individual object, plus properties and relations, interpreted as constraints, about them.      But the twist--what really sets DRT out as a breakthrough scientific theory--is that the DRS serves not _just_ as a handy means to track an evolving knowledge base, but it also solves several otherwise mysterious problems in understanding sentences, including so-called \\"Donkey Anaphora\\" and other pronoun binding problems.      DRT has served as the foundation and inspiration to much work in computational linguistics, including such interesting frameworks as situation theory, which cements this book's place in the linguist's cannon.	2005-03-29
US	53057024	RMGPOPQI9FAL4	1558607323	433849472	Real-Time Collision Detection (The Morgan Kaufmann Series in Interactive 3-D Technology)	Books	5	41	44	N	N	Not Just for Game Programmers!	Let me state in the most emphatic terms--this book contains the very best discussion on spatial indexing and querying ever written.  If you have an algorithm which is spending too much time querying in quad trees, then you need to buy this book and read it until you become one with it. <br /> <br />It should be pointed out that this book will be useful not just for game programmers but also for other programmers who do a lot of computational geometry.  EDA programmers, VLSI, CAD programmers, etc, rejoice. <br /> <br />I disagree with a previous reviewer who is complaining about lack of source code, etc.  The author provides good C++ implementations of his algorithms and provides very clear descriptions of them.  The author is holding up his end of the bargan--if you arn't a computational Jedi knight of space and time after reading this book, the fault isn't in the efforts of the author, its in the efforts of the reader. <br /> <br />Don't worry about how expensive the book is.  I've used it on the job and it has already paid for itself many times over.	2005-03-19
US	53057024	RL9SMOYG8DWDF	0262150395	540745168	The Craft of Prolog (Logic Programming)	Books	5	24	25	N	N	"Where to go next" in your quest for prolog mastery	The spirit of this book is exemplified by this quote: \\"If your Prolog code is ugly, the chances are that you either don't understand your problem or you don't understand your programming language, and in neither case does your code stand much chance of being efficient.\\"   <br /> <br />This book is O'Keefe's attempt to wipe out both root and branch of bad prolog code.  A close reading of this book will not only give you a deep understanding of prolog and logic programming, but it will put you into mental contact with O'Keefe's profound insights into the kind of thinking necessary for being a topflight progammer. <br /> <br />I should mention that this book is not just for prolog programmers.  It contains mindbending observations on programming available absolutly nowhere else.  Unfortunately, like the scholar of the middle ages who had to master Latin and greek, you'll have to learn prolog before this book will yield up its treasures. <br /> <br />As O'Keefe unambiguously states in the opening paragraphs, this book should NOT be your first, or even your second, book on Prolog.  There's no royal road to knowledge; you'll have to pay your dues.  But after you've achieved a good foundation, this is the way forwared to enlightenment.	2004-10-31
US	53057024	RKTZFZAB76DUL	0199247153	955449092	Facing Facts	Books	5	4	5	N	N	Neale sets the standard....again.	Even the most jaded observer of philosophy as its practiced today has to be cheered by this book.  For Neale shows that philosophy at its best can rise above the endless confusion and ego-driven obfuscation which is unfortunatly so prevalent.  Neale's superpower is discernment; he can really frame an argument, and in this book he has what may very well be the last word on the slingshot. <br /> <br />One bonus of this book is Neale's chapter summarizing Donald Davidson's project.  A must-read for those new to Davidson and wanting to quickly get a grip on the most important of Davidson's theses.  Davidson himself had many nice things to say about this chapter and its ancestors.  In one place Davidson calls it a \\"masterful\\" summary (in \\"Donald Davidson\\", edited by Urzula M. Zeglen) and in another place he says that \\"Fortunatly Stephen Neale has...expressed my view on truth and representation with great clarity, and has emphasized distinctions I apparently have not adequately stressed.\\"  If you're new to Davidson, reading this chapter can literally save you years of study, as Neale has done a lot of the heavy-lifting of synthesizing and summarizing for you.	2004-10-20
US	53057024	R1DEZ3RLNOEOPQ	0521527147	179657569	Modal Logic (Cambridge Tracts in Theoretical Computer Science)	Books	5	3	5	N	N	Finally, an approach to Modal Logic for the new century...	If you're wondering why modal language is so useful but are dismayed about possible worlds, then this is your book.  (Side note:  when does Blackburn sleep?  how can you be at the forefront of modal logic and natural language processing at the same time?)	2004-10-20
US	53057024	RQT4RMNMTMYKL	0136292135	630697033	Natural Language Processing for Prolog Programmers	Books	4	9	9	N	N	One of the best intros to NLP	This book, while a bit dated, is still the best discussion of a wide variety of (nonstatistical) parsing methods in print.  The best part of this book is the table on p. 191, where the author compares the runtimes of the various parsing algorithms, and shows that the one with the scariest \\"big O\\" complexity is actually the fastest in practice.  This is a very important lesson to impart to budding computer scientists: use \\"big O\\" analysis wisely, not as the voice of God, as to which algorithm is the best practical algorithm.    I've given this book 4 stars instead of 5 stars because it is a little out of date: look elsewhere for the best discussions of quantifier scope handling and discourse.  Also, it doesn't contain any discussions on the what is today the more fashionable statistical-based approaches, but the jury is still out, IMHO, on whether this is a drawback or not.	2004-10-20
US	53057024	R38I51D6IMWXBX	0812692357	885101762	Scientific Reasoning: The Bayesian Approach	Books	3	22	32	N	N	Just shy of being great....	This book contains lots of useful information for the budding Baysian.  Excellent discussions on many topics.  However, I have to give this only 3 stars, because on a cardinal point, the authors give very bad advice:  they give the impression that Komogorov complexity-based methods are ill motivated.  In fact, Kolmogorov complexity is one of the most fruitful new developments in Baysianism, and I have personally used it many times in industrial settings to solve otherwise intractible problems.   <br /> <br />However, on most points the book is very useful.  I recommend buying the first edition over the second, because the second edition doesn't really add that much useful info over the first.  I also recommend buying in addition to this book Ming Li and Paul Vianyi's book on Kolmogorov complexity, for a comprehensive intro to a whole wonderland of Baysianism which Howson & Urbach have overlooked.	2004-10-20
US	53057024	R3TRBAA52MO21M	0937073180	597987330	Prolog and Natural-Language Analysis (Center for the Study of Language and Information Publication Lecture Notes)	Books	5	8	8	N	N	Improves on most of its sucessors	This book provides, in one volume, one of the best introductions to prolog programming and one of the best introductions to natural language processing.  It is virtually unique in that it shows how to interface a natural language interface to a theorem prover.  <br /> <br />This book was far ahead of its time when it was published, and it is still far ahead of most of the books written today on NLP.	2004-10-19
US	53057024	RKNM2MDR1UTEB	0486283186	919988653	An Introduction to the Philosophy of Science	Books	5	28	31	N	N	A unique product of a unique collaberation	Is this book still relevant, despite being a bit old?  The answer is<BR>an unqualified YES.  Why is this book the best introduction to the<BR>philosophy of science ever written?  Because it is the result of a<BR>collaberation between Rudolf Carnap (a philosophical giant) and Martin<BR>Gardner--the celebrated columnest who gave us so many years of<BR>&quot;Mathematical games,&quot; during Scientific American's golden years.<br />Because it was co-written by a professional writer of popular<BR>mathematics, it is probably the only philosophy of science book which<BR>can be read and understood by the interested lay person.  But because<BR>it is based on a series of lecture notes from one of the worlds<BR>all-time great philosophers of science, it doesn't &quot;wimp out&quot; on the<BR>technical level.  If you read it you will be brought to the forefront<BR>of philosophy of science, at least as understood by the later logical<BR>positivists.<br />In short, a remarkable collaberation by two men who were at the top of<BR>their game.  Thank God for Dover.  For ten bucks you can buy a priceless<BR>book.	2004-07-07
US	53057024	R3IB4E7KPZDLAA	0262182181	236973156	Knowledge in Action: Logical Foundations for Specifying and Implementing Dynamical Systems	Books	5	9	10	N	N	Must read for everyone interested in AI or philosophy	It is rare that a book appears which presents a solution to a major outstanding problem.   It is even rarer when a book presents a solution which is both theoretically sound and undeniably practical.  But this is such a book.  The frame problem, which went unnoticed for the first 70 years of logic, and unsolved for the next 30, here gets a solution.<br />This book is the distillation of Reiter's lifeswork.  Unlike many other such books, however, it is not a mere cut-n-paste of conference papers and tech reports.  Instead of being a pastiche, it is rather a continuous, sustained argument, persuasively and clearly presented.  A masterpiece.<br />There is something here to infuriate everybody.  Those who think that AI shouldn't be using logic-based methods will be infuriated because Reiter has here, for the first time, made them work.  Those who think that first-order logic is the only true logic will be infuriated, because Reiter shows how 2nd order logic is key.  Those who think that AI is too theoretical will be infuriated because this is a practical book.  Those who think that AI shouldn't worry about being practical will be infuriated, because Reiter has shown that the best theory leads to the most practical solution.  Those who are LISP fans will be infuriated because his methods lead inexorably to PROLOG.  Read the book, be infuriated by it, and humbly learn from it.  The master speaks.<br />If you've made it to this web page or this far in the review, you have to buy and read this book :-)	2004-06-29
US	53057024	R1JD5O1RV5TQ1V	0534583954	370973910	On Davidson (Wadsworth Philosophers Series)	Books	5	6	6	N	N	How did Wheeler do it?	By far the best introduction to Davidson's philosophy.  It is amazing that Wheeler could pack, in less than 100 pages, both a description and a justification of so much of Davidson's life's work.  <br />One of the things which makes Davidson's work hard to understand is that many of his theses are so bizzare and counterintuative.  Here is where Wheeler's book shines--instead of just enumerating bizzare thesis after bizzare thesis, he makes a habit of stating a bizzare thesis and then ALSO stating a very cogent reason why we should believe it.  These reasons are so carefully crafted and articulated that it really aids in understanding.	2003-04-23
US	53057024	R2FR2ZAAT5SHWY	0471268526	982850066	Programming with Objects: A Comparative Presentation of Object Oriented Programming with C++ and Java	Books	5	21	25	N	N	A pedagogical triumph!	This book is virtually unique. By presenting object-oriented programming from the twin viewpoints of java and c++, the author gives a 3-dimensional perspective of object-oriented programming.<br />There are three groups of programmers who would benefit from this book. Firstly, those who have mastered an imperative language like C and who are totally new to object oriented programming. Learning both java and c++ by reading one book can save a tremendous amount of time.<br />But two equally important audiences for this book are those programmers who know only c++ or java, and want to learn the other language. If you are either of these camps, this is the book you've been waiting for. It can be read as a &quot;programming cookbook&quot; showing how to do almost every common programming task, from copying files to Gui/Database programming in both java and c++, allowing the reader to leverage expertise in one language when learning the other.	2003-04-06
US	53057024	R3HNPTY4EEO1X	0262611082	267712519	Theories of Truth: A Critical Introduction	Books	5	11	11	N	N	Best intro to theories of truth	By far the best introduction to theories of truth.  The author has a preternatural gift for exposition.  Even the twistiest corners of truth-theorizing are explained clearly without being oversimplified.<br />He comes down a little hard on James and the pragmatic theory of truth, but having opinions is a good thing, not a bad thing.  Of particular interest is his chapters on the Liar paradox--an almost unbelievably lucid explication.  Follow up with Scott Soames book on truth, and you'll be well on your way.	2003-02-12
