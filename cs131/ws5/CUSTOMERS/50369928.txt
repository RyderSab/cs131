US	50369928	RPT3C2IF7P9CC	1590591410	605345935	Maximizing .NET Performance (Expert's Voice)	Books	4	9	9	N	N	.NET Framework Tour from a Performance Perspective	There are no other books on .NET Performance so, when this one fell in my hands, it put a smile on my face (sad, I know). When I got to the end, I was not disappointed. Around 250 well-written pages over 15 chapters and, as you'd expect, you can delve into it in random order, making it a good reference book. Even so, I read it cover to cover. The first two chapters lay the ground; the last chapter provides generic advice on troubleshooting and the 12 chapters in-between focus on specific .NET areas: a framework tour from a performance perspective. Naturally, a subject of this nature assumes the reader has some .NET experience and targets the Intermediate/Advanced level.<br /><br />Don't expect material on GUI (Windows.Forms), Database (ADO.NET) and Web (ASP.NET); rather a discussion on elements that every application is built on (Type design/implementation, Strings/Text/RegEx, Collections, Language Specifics, GC & Object Lifetime, Exceptions, Security, Threading, IO/Serialisation, PInvoke, CLR). I challenge you to find a chapter that does not teach you at least one thing you were unaware of before. We have to sum it up with the great technical phrase: \\"It is all great stuff\\".<br /><br />There are no axioms presented, and readers expecting a \\"cookbook\\" will be disappointed. Every claim is backed up with a reference to a testcase and even then, only after we have delved under the covers to see *why* something is slow or *how* a change makes something faster. By taking this approach, the reader should be able to repeat the investigation/tests for newer/other versions of the framework. So, having just mentioned how there is a cross-reference to specific testcases, I have hinted at what is one of the best contributions of this book: A .NET Benchmark Test Harness. This is described in the appendix of the book and the code/binaries can be obtained from the publisher's site.	2004-11-14
US	50369928	R269618P7FHY3O	0321174038	730049968	.NET Compact Framework Programming with C#	Books	5	11	13	N	N	The one to own	First you should know that I have not read the released version of this text. I was lucky enough to receive a manuscript and review the draft for the publisher - it was great! The title does not reflect the fact that this is not another \\"let's take a tour round the namespaces\\" book.<br /><br />The authors do not assume reader familiarity with Windows CE or embedded development in general and cover these topics as appropriate; furthermore, they go into great detail describing how to achieve results via PInvoke, which is essential given the compactness of the .NETcf.<br /><br />This book is essential for all .NETcf developers. However, there will be a small minority (e.g. targeting simple SQL-based apps with VB as their only background) that could find the info overwhelming. On the other hand, an experienced eVC developer may find a lot of info not specifically related to .NETcf.<br /><br />Apart from everything one needs to know about drawing text and fonts, highlights include a great overview of the Windows CE platform. It is a \\"must\\" for desktop developers who are moving to the .NETcf. Other sources don't consider this at all. The memory management section is fantastic. No matter what programming background one has (eVC, VB, .NET desktop framework); this stuff is invaluable and not covered anywhere else at the time I read the draft. It is a shame for the authors that the book took so long to be published and some of this stuff is now available online...<br /><br />Apologies for not going into greater detail on the contents but to sum it up, if you will buy a book on the CF 1.0 today then this is the one to have - I should know as I have read every other CF book on the market :-)	2004-08-23
US	50369928	R2IV51AO5WDCSK	0596007574	333154124	.NET Compact Framework Pocket Guide	Books	4	12	12	N	N	PocketGuide to get you up and running with CF. Indeed it is!	This A6/B6-sized book with only 100 pages certainly justifies the &quot;Pocket Guide&quot; in its title. One could write a whole book on what is missing from it in terms of covering the .NET CF, but that would be unfair, as the purpose of the book is just to get you up and running with programming against the CF. It would also be unfair for this review to be longer than the book, so I'll try and keep it short.<br />It starts with a quick intro to the CLR, devices and Visual Studio. At the end of these small 30 pages the reader has written the typical &quot;Hello World&quot; app and has had all the terminology put in context; impressively straightforward writing style and explanations. The second part of the book consists of 10 pages describing every single control (with a sentence or two) and includes a very good section on SmartPhone differences and considerations. The fourth part is the same size and discusses deployment hitting all the right points.<br />The third part is the largest and contains 3 end-to-end projects: Currency Converter, Book Ordering System and Bluetooth Chat. It is a good selection of sample code as it covers data, communications and web services amongst other things. If you are a complete novice these sample projects should prove valuable in getting you started. Note however that all the code is in VB.NET (whether you'll be glad or sad with that depends entirely on your upbringing).	2004-07-18
US	50369928	RDO58DVZ2NP2H	0321197887	410947954	Building Solutions with the Microsoft .NET Compact Framework: Architecture and Best Practices for Mobile Development	Books	3	12	13	N	N	Great book for technical managers, not for developers	This is a well written book with a nice overall structure and easy-to-follow language. Each discussion starts with an executive summary and ends with references to other resources for further reading, thus making it a very straightforward read. I will not enumerate the subjects covered, since you can do that by looking at the contents table.<br />Although the title tells us this is a .NETcf book, you should pay attention to the subtitle, as the topics of architecture and general advice on mobile development are also covered at considerable length. This may or may not please you, depending on your role. For example, the chapter on security includes general theoretical principles on the topic but omits examples of using the Cryptography API. We notice this in other parts of the book, and in fact the first chapter is a pure retrospection into the history of mobile devices as supported by Microsoft. Add to my previous comments that the book is only 350 pages long and the fact that there are no complete/end-to-end code examples, and you can see why it is not aimed at programmers. To be fair, the authors don't hide this and they state in their preface that the target audiences are technical managers and architects.<br />Like anything that goes to print, there are some errors including: the recommendation of using ResEditor (it simply does not work with the CF); the suggestion that C# is 100% compatible between desktop and compact frameworks (what about `volatile'?); and the claim that the class loader ignores the build &amp; revision number (or that for private assemblies the version number is not consulted), which is not true. Overall, though, the content is correct and for technical managers this is probably the best book on the subject (but certainly not for developers). Finally, a small note that there is no mention of SmartPhone 2003 since the writing must have been completed prior to its launch (or indeed prior to CE 4.2).	2004-05-29
US	50369928	R3AQ6URFUZPIEA	1590590953	978562546	The Definitive Guide to the .NET Compact Framework	Books	4	17	18	N	N	Apart from some limitations this is good work	It is important to understand that this is a VB book through and through. In fact many concepts are explained assuming an understanding of eVB/VB. If that is indeed your background and you are not a C# person, then the book deserves 4 stars; but obviously if you are not, you should look elsewhere. The other thing to keep in mind, is that it only covers development for the PocketPC; in other words if you are cutting code for a custom WindowsCE, device then you will find no coverage regarding the differences of the 2 platforms.<br />Beginner to intermediate CF developers will benefit from a well written book, both in style and coverage (even though the book was written before both Service Packs and before the SmartPhone release). The tutorial style is not to my liking and it is annoying to read the same concepts first in theory and then re-read them for each sample at the end of the chapter. Had this been avoided the book would be rather smaller as well (instead of the 1000 pages that it is). However, that is probably individual preference rather than criticism and if you don't mind repetition it shouldn't bug you much.<br />The two areas that I think should have been covered (and are in books from the competition) are performance (measuring, optimising techniques, pitfalls etc) and threading. In fact, not only threading is completely ignored, but in most samples Windows.Forms.Timers are used combined with Application.DoEvents (whereas threading would have made a much more natural solution).<br />Apart from the aforementioned limitations, anything else you'd expect to see covered is! There is no point repeating here the table of contents that you can check out for yourselves. Unique areas (compared with the competition) covered are accessing the POOM (but the chapter is entirely based on a 3rd party product), building help systems and producing reports (again based on 3rd party products).	2004-03-15
US	50369928	RO2CP89MA4T5J	0672325705	326389748	Microsoft .NET Compact Framework Kick Start	Books	2	16	18	N	N	2 and a half stars for C# readers	There are some good things in this book but overall it is unimpressive - in my opinion of course.<br />It starts off well by describing how to setup the IDE and the device, including a unique description of how to target unsupported devices. It then goes on to the mandatory introduction to the .NETcf, including detailed information on the JIT compilers and the CLR. Chapter 3 is all about the GUI, with consideration of Pocket PC and Windows CE devices. Most info is available online and in the help, but it is well presented.<br />Chapter 4 on threading is disappointing. It incorrectly states that there are only a few threads maintained by the ThreadPool; it does not even mention the Threading.Timer, ManualResetEvent and AutoResetEvent classes. The examples provided are unrealistic and serve only for demonstrating the syntax; the same comment applies to all examples throughout the book.<br />Chapter 5 briefly overviews connectivity with TCP, UDP, HTTP and IR. As with other areas of the book, there is a lot of breadth but no depth. How can a discussion on programming sockets ignore asynchronous communication?<br />The following 2 chapters are about ADO.NET and Sqlce; nothing spectacular here, but no real omissions either. These are followed by 4 chapters on XML. XML in relation to the dataset and the whole XML namespace are pretty well covered here.<br />Interoping with native code is essential to any .NETcf developer, given the compactness of the framework. Chapter 12 attempts to cover that and it generally provides a good introduction to it. However, there is no mention of the dumpbin utility or the extern keyword or a short description on writing an eVC dll. A serious chapter on the topic would have covered these, as well as the technique of subclassing .NET controls with the MessageWindow (which itself is not described at all). Finally, the authors describe how to use unsafe C# for marshalling deep/nested structures, whereas there is an alternative safe way of achieving the same result (which also means it can be used from VB.NET).<br />Chapter 13 on Reflection is good. I have to say, though, that when describing a technology it is useful to tell the reader where the benefit is, as well as mention scenarios of particular interest. So, for example, when talking about reflection, the authors could have explained how to use it to compensate for the lack of the Enum.Parse method. The same principle applies to other areas of the book.<br />I cannot criticise the contents of chapter 14 on cryptography, because the topic is mostly left untouched by other .NETcf sources. Chapter 15 on performance is great. I would be urging you to get access to this chapter one way or another, were it not for a recent excellent article on MSDN covering the same topic very well. Chapter 16 on deployment is good, and the final chapter on the smartphone will not tell you much (5-6 pages long) but it will tell you more than any other printed source will (at the moment).<br />&lt;VB rant&gt;<br />Examples are in both VB and C#. I applaud publishers who do this rather than release two books with language being the only difference, or even worst focus on one language only. However, when this approach is followed, every effort should be made for the examples to be identical except for the syntax. This cannot be said for this book, where a poor translation of the C# examples into VB was attempted. Suffice to say that some of that code will not even compile, and the code that does clearly has Option Strict turned off. Every effort has been made to keep the layout of the VB code different to the C# one; the authors think arrays in VB.NET start at 1, that the only way to get the type of a class is to instantiate one first, that escape characters are needed in VB strings, that arrays or objects cannot be created on the same line, that integers cannot be declared inline to a for loop, that UInt32s can be used in VB and so on and so forth. Hence 2.5 stars for C# readers and only 2 for VB.NET readers.<br />&lt;/VB rant&gt;rs and only 2 for VB.NET readers.<BR>&lt;/VB rant&gt;	2003-12-18
US	50369928	RY2YHP14TJC4U	0735617252	81863047	Microsoft® .NET Compact Framework (Core Reference) (Developer Reference)	Books	3	15	16	N	N	and a half. Recommended but most info is available online	Writing a book on the .NETcf is a challenge because there is a wide target audience to pick from...Each group has different needs e.g. introduction to programming for small devices OR to programming against the .NET libraries OR to differences with the desktop version etc. So, inevitably you will belong in one or more of the above categories with corresponding requirements and hence will find redundant info in a book that tries to please all people - such as this book.<br />You will find introductions to the classes of the .NET framework that exist on both desktop and CF. These are very good descriptions and even though there are deeper explanations in other books, here you have the confidence that everything described is applicable without having to check elsewhere for supported classes/methods. If you are very familiar with the desktop version you will be able to skim through a good half of the material in the book just noting the differences.<br />There are areas which are new to the CF or just very different from the desktop and these are covered well, including deployment, infrared comms and SqlServerCe. The winform controls have fewer methods than their desktop counterparts and as such you will have to create custom controls fairly often so the chapter on this subject is very valuable and well written. You will also have to interoperate with native code and the chapter on that is good including an excellent description of the CF-specific MessageWindow component.<br />Two areas are briefly touched upon and deserve much more attention: Targeting both the desktop and compact frameworks from the same projects and COM interoperability. I would have also liked a chapter on performance considerations since, naturally, speed and memory are of particular interest to anybody developing on small devices; a search on the cf newsgroup emphasizes this point.<br />The book ends with a useful appendix listing the framework namespaces and classes with a short description accompanying the ones that are supported on the CF. I am not including a list of the contents here but it is worth going through them to get a fuller picture. They are very accurate as you'd expect from a book that is well written with few if any grammatical/syntactical mistakes (although a couple of harmless factual errors crept in).<br />The .NETcf is in RTM and available through VS 2003 (public release expected end of April 03). It is no surprise that this is the only book on it available now which is why I could have given it 5 stars... However there are no groundbreaking ideas in the book and most info is available on the web...panying the ones that are supported on the CF. I am not including a list of the contents here but it is worth going through them to get a fuller picture. They are very accurate as you'd expect from a book that is well written with few if any grammatical/syntactical mistakes (although a couple of harmless factual errors crept in).<br />The .NETcf is in RTM and available through VS 2003 (public release expected end of April 03). It is no surprise that this is the only book on it available now which is why I could have given it 5 stars... However there are no groundbreaking ideas in the book and most info is available on the web...	2003-03-14
US	50369928	R1IKKHQ5O0ERHB	1590590252	740034742	Advanced .NET Remoting (C# Edition)	Books	4	11	11	N	N	THE resource for .NET Remoting (along with Ingo's website)	Distributed computing in the .NET world is achieved via Remoting; that is all that is covered here with no unnecessary introductions to the Framework or other parts of it. This easy to read book clearly demonstrates that the author is not only an expert on Remoting but that he has an excellent understanding on distributed technologies in general (design of &amp; past approaches).<br />Everything on Remoting is covered in the first part of the book (server/client activated objects, lifetime management issues, SoapSuds, config files, hosting in IIS and security, versioning, asynchronous calls etc) which is basically the first 6 chapters. The remainder 5 chapters go deeper than what most of us will venture (extending a chosen layer, custom sink and remoting proxy creation, developing your own transport channel etc).<br />If we want to knit-pick we could complain about the focus being entirely on distributed apps instead of describing good practices for inter-process communication on the same PC only. This was easily achieved with ActiveX Exes (out-of-proc servers) in COM and now with .NET requires Remoting.<br />Finally, the code used in the numerous examples can be downloaded from the book's website in both VB.NET &amp; C#. If you are still looking for answers to particular Remoting probs after reading the book, you will find Ingo at the remoting newsgroup 'killing' all queries submitted.	2002-09-08
US	50369928	R2IDUFVYUB9Z0I	0201741628	170655711	Understanding .NET: A Tutorial and Analysis (Independent Technology Guides)	Books	4	15	16	N	N	Best Technical Overview of .NET to date	If every technical book was written by Chappell there would be no 'complex' topics or 'hard to grasp' concepts. Some people are born with the gift of good communication and he is certainly one of them. Almost every paragraph is accompanied by a margin note summarizing it, which is very helpful for navigating or even skipping sections that are not of interest. The 'grey' analysis boxes are the author's way of giving us his valuable opinion rather than pure fact. I really do wish this was the first book I had read on .NET.<br />The 'Tutorial and Analysis' starts by putting .NET in context and defining the .NET Framework, Visual Studio.NET, the .NET servers and Web Services amongst other terms/concepts. This first chapter is also effectively an overview of the 6 chapters that follow it: Web Services, CLR, languages, ADO.NET, ASP.NET and the best overview of the huge .NET Framework Class Library I have come across. There are simple code examples demonstrating the theory but of course they are just &quot;tasters&quot; and further books for each major area are required in order to start coding for real.<br />Technical managers and newbies will be mad not to get their hands on this book; however for those with hands-on experience the benefit is there only if the big picture is still not clear.	2002-09-08
US	50369928	R105ZA70Y9J12O	067232170X	264976561	.NET and COM: The Complete Interoperability Guide	Books	5	24	25	N	N	There is no other book covering a topic so well	Moving to .NET doesn't mean throwing away your COM code. Integrating the 2 worlds (managed and unmanaged) is achieved via COM Interoperability and there are 2 main scenarios:<br />  1. Writing .NET clients that use COM servers<br />  2. Writing .NET servers to be used by COM clients<br />This 1500 pager is split into 9 parts containing 24 chapters and 6 appendices. In my opinion, the heart of this work lies in parts 2-5 (650 pages, 14 chapters) that thoroughly detail how to write perfect .NET components for COM clients, COM components for .NET clients, .NET clients for COM components and COM clients for .NET components. Trust me (and anyone that has read this book), there is absolutely nothing else left to be said about the topic.<br />The remaining 3 parts cover PInvoke (talking to Win32 dlls), advanced topics such as custom marshaling and two comprehensive examples. The quality throughout is of the highest level. It is a joy to read and full of technical information, a lot of it not found anywhere else. Own this book and forget the online help or any internet sites when it comes to interoperability.<br />The examples used throughout the book are not overly complex or academic or basic; they are just right. Such a balance is hard to strike. What is also hard to find is a book that treats both VB &amp; C++ developers equally. Many authors will benefit by reading Nathan's writings to learn how to achieve that. Whether you plan to write C# or VB.NET code and whether your COM components were written in C++ or VB6 you will not feel left out or bored going through the chapters.<br />Although large, it can be read linearly and it will definitely serve as a reference text on your shelf. I particularly enjoyed the sidebars (categorised as FAQ, Digging Deeper, Tip, and Caution) which are full of golden information. I could go on praising it but suffice to say that it could easily be sold with money-back guarantee and not a single book would be returned.	2002-07-23
US	50369928	RZ7Q21XUY71DG	1861007132	377883675	Visual Basic .NET Threading Handbook	Books	3	6	7	N	N	With better examples it would have earned more stars	Currently this is the only .NET book that addresses Threading and nothing else. Furthermore, it targets VB developers and as such, it is bound to be a success (although apart from the code listings there isn't much VB-specific about it). It deserves the handbook title as it comes in 240 smaller than A4 pages and I think it is good value for money. It must be said that there isn't much in the Threading namespace that isn't covered in the book, although not all classes/methods get the same coverage and the book could have been even smaller in my opinion.<br />It is divided in 7 chapters. The first chapter is a good introduction to threading but a lot more could be said on AppDomains. The second &amp; third chapters are the core of the book introducing the threading namespace, the Thread class along with almost all of its methods and the synchronization techniques available (Monitor, ReadWriterLock, Manual and AutoResetEvent, Mutex and Interlocked). This is all good stuff and if it weren't for the very basic examples, it would be excellent.<br />Chapter 4 is titled Design Patterns but don't get your hopes high. Not only it does not include design patterns (according to the common definition of the term) but it discusses the STA &amp; MTA threading models in such a way that the reader may be left confused. This includes factual errors and bad grammar. It then usefully introduces 3 threading models (Main &amp; Worker, Peer, and Pipeline models) but they are really let down by the respective accompanying examples. The (many) authors have tried to describe a single code example by retrofitting the 3 models to it each time; they should have introduced a different example per threading model as applicable.<br />Chapter 5 describes the Thread Pool and makes good reading. I was looking forward to the 6th chapter on debugging/tracing threads but there was only a generic description of debugging for VS.NET, which in my opinion, could have been omitted altogether. The book ends with a complete example that uses the classes from the Net namespace.<br />Besides any criticism you find above and the 3 star rating that reflects the quality of the work, I do recommend this book to .NET developers who are new to threading.ith a complete example that uses the classes from the Net namespace.<br />Besides any criticism you find above and the 3 star rating that reflects the quality of the work, I do recommend this book to .NET developers who are new to threading.	2002-07-17
US	50369928	R2TUL8LNCEFLCR	1861007000	531724394	.NET Compact Framework	Books	1	15	16	N	N	Not a lot to offer and already out-of-date	The .NET Compact Framework Beta 1 was released in April 2002 and this book was published in February 2002 based on a 'technology preview' release. The only reason I read this is because - understandably - there is no other book out there covering the .NETcf<br />It's a small book of 167 A5 pages written by 4 people. There are 6 chapters starting with an introductory overview of the .NETcf and ending with advice on porting code from existing CE code or the desktop. The second chapter is about the SDE and VS.NET. This leaves chapters 3-5 which go through building a 3-tier application (GUI - middle tier - data tier).<br />Unfortunately, I found it to be full of syntax/grammar errors and the overall style indicates a piece of work that has gone through little review prior to going public. Irrelevant info is included (how to build Window &amp; Web Service projects on the desktop and MMIT) and some of the relevant info is just wrong (features in Beta 1 added/dropped since PDC release). It will become even more outdated with the next release of the .NETcf in August (the final expected in November).<br />IMHO, there is much more info and benefit to be gained by visiting the relevant pages of gotdotnet.com and the compactframework newsgroup.	2002-07-07
US	50369928	R38A63RQ6CLICK	1590590104	775045558	Database Programming With C#	Books	3	13	13	N	N	Good for begginers. Let down by inclusion of irrelevant info	Database Programming in .NET is accomplished via ADO.NET which dominates the middle layer of any .NET database application. It can be done via C# or any other .NET language, and there are command line tools as well as Visual Studio.NET to assist the developer. So in a book titled &quot;Database Programming with C#&quot; we expect to find an in depth description of ADO.NET with C# examples demonstrating the use of the classes/methods to accomplish common database tasks.<br />We can cut this review short by just saying that the author delivers on the expectation with ADO.NET being covered in 2 (out of the 11) chapters. Chapters 3A &amp; 3B describe the connected &amp; disconnected layers and constitute more than a third of the book's size. However, what dominates these chapters and indeed the rest of the book is the many lengthy tables listing methods of the various framework classes. Not only does this get in the way of an enjoyable read but it is just a rehash of the already excellent help system.<br />Reading this book cover to cover can also become tiresome due to a lot of repetition. The flip-side to this is that the book can be used as a reference text. Claiming the user level to be intermediate-advanced is ambitious although absolute beginners will find an abundance of useful information.<br />So what do the other chapters cover? The first one claims to be a 'quick intro to C#' but ends up being an overview of .NET in general; The second one introduces databases at the most basic level and really should have been considered prerequisite knowledge (i.e. read Codd, Date or Elmasri etc); the fourth chapter describes VS.NET with its database tools/wizards and the fifth one describes structured exception handling (why?!). There is some good material in chapters 6-8 on stored procedures, views, triggers and message queues. SQLXML is introduced in the appendix but it would have been nice to see more XML coverage throughout the book.<br />To summarise, if we can leave aside the style and bad organisation of the book, most of the content will more than satisfy beginners.aside the style and bad organisation of the book, most of the content will more than satisfy beginners.	2002-07-07
US	50369928	R17PKKLXNGUTV	0201702657	779808565	Visual Basic Design Patterns VB 6.0 and VB.NET (With CD-ROm)	Books	4	9	9	N	N	The 23 well-known patterns described by the GoF, now in VB	There is no argument that \\"Design Patterns\\" by the Gang of Four is a seminal piece and essential reading for any professional OO developer. There has long been a need for those patterns (illustrated in OMT with examples in C++) to be described in UML and VB. Mr Cooper fills that gap.<br />The author starts off by explaining what design patterns are; this is one of the best introductions to the topic that I have read. The following 7 chapters introduce UML, OO Programming and VB.NET. In my opinion, these topics cannot be explained in fewer than 100 pages of any book and hence should have been prerequisites on our part (the readers). The result is that the coverage is neither broad nor deep, but nevertheless serves at getting us all on level ground.<br />The remainder 360 pages focus on describing all the patterns found in the Gamma et al book. It is all very good stuff doing justice to the title, as every pattern description (bar one) is accompanied by examples in both VB6 and VB.NET. Books are coming out continuously that describe various areas of the .NET framework, of the VB language, migration issues etc. It is pleasant to see a book that discusses the deeper aspect of programming good OO software using infamous design patterns.<br />Depending on your programming domain, you will be delighted or disappointed that almost all examples are GUI based (no component stuff here). Also, this is not a book from one VB programmer to another. On contrary, it is evident that the author's first language is not VB and references to Java/Smalltalk can be found in the text. Irrelevant as that may be, I would have preferred to have seen events (VB6) and delegates (VB.NET) to have been leveraged in the patterns.<br />To finish on a positive note, this book (and the CD with all examples' code that accompanies it) serves as a good reference while writing software in VB6 and VS.NET	2002-01-14
US	50369928	R15DX5OZ5PR02M	1893115976	184799915	Moving to VB .NET: Strategies, Concepts, and Code	Books	4	12	13	N	N	VB Guru gives us his opinion - Perfect	As the title suggests, this is a book for moving to VB.NET and not one to seriously assist in developing on the .NET platform today (e.g. as a reference or describing advanced techniques/tips, design patterns etc). It only helps (in a great way) VB6 developers to start thinking about the .NET platform and what needs to change in their thinking approach to developing software for the .NET platform. Obviously, if you are not a VB6 developer then look elsewhere; even if you have commercial experience with other languages (e.g. Java) then again this might not be the right book for you. Another prerequisite is to have access to the .NET documentation, as the author does not repeat what is in it and indeed some of the chapters require that you have read Microsoft's documents.<br />The first 3 chapters (part of `Strategies') are aimed at an audience who has never heard of .NET before. Alternatively they may be targeting an audience who has, but is waiting on Appleman's opinion on how .NET fits in the world - as opposed to the marchitectural views we find in Microsoft slides at various conferences. They make a good (if not very subjective) read.<br />Four chapters (part of `Concepts') follow, that are just essential reading to any VB developer. The migration from COM to .NET and multithreading are covered, as well as a view on inheritance (although more could be said on this matter).<br />The final 4 chapters (part of `Code') are full of must-knows and cover some of the .NET namespaces at exactly the right level, leaving the reader wanting to go write some code themselves.<br />No doubt once development on the .NET platform has matured you will want a more advanced book, but at this moment in time Dan hits the spot.	2001-12-18
US	50369928	R1MP9FNR3UKGZI	0130925691	576001953	Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and the Unified Process (2nd Edition)	Books	5	19	20	N	N	Learn to think in OO by example	It is easy to run out of space just by listing the topics introduced in this book, nevertheless here are some of them: OO fundamentals, UML 1.4, design patterns, Unified Process, domain modelling, mapping of design-to-code (Java), architectural analysis, framework design and the list goes on... The content is organised in 6 parts, including a total of 36 chapters spread over 600+ pages. Long book, many topics... If you are after a quick or thorough description of a single topic then naturally this is not the right reading.<br />The core offering of the book is the middle 4 parts that describe the analysis &amp; design of the case study (a POS system). We are taken through the inception and 3 iterations of the elaboration phase of the UP. It is almost minimalist-UP, as the emphasis is on just doing what is necessary and not creating text/ diagrams for documentation purposes only; the code is the ultimate real model. Naturally, use-case driven, iterative and incremental development is highlighted. In addition, during the OOAD, we are taught how to harness the UML and not only shown the notation and elements that it contains. A good number of patterns are described, again while being applied to the case study, from the GRASP (essential if your background is not OO) to the GoF patterns and many others. The title and subtitle of the book are definitely justified.<br />The author explains all techniques very well and provides precise definitions and examples that hit the spot. In fact, every decision taken when designing for the case study builds on notions previously introduced, thus demystifying OO design; Craig Larman proves it to be a science and not art or magic. Furthermore, numerous references are given for the principles illustrated as well as pointers for further reading (which sometimes are needed given the introductory nature of the writing).<br />In reality, few developers are completely agnostic to all the topics covered in this book (and if they are, then it is the perfect read). Hence, given the intertwined exploration of all areas, few readers are going to avoid reading about material they already know. Following from the previous point, it is natural that the book does not serve as the best of reference titles; although its well-organised index, glossary and in-cover tables/ diagrams do help. In any case, this excellent book would make an ideal university course book.is the perfect read). Hence, given the intertwined exploration of all areas, few readers are going to avoid reading about material they already know. Following from the previous point, it is natural that the book does not serve as the best of reference titles; although its well-organised index, glossary and in-cover tables/ diagrams do help. In any case, this excellent book would make an ideal university course book.	2001-12-06
US	50369928	R3P3267W7ZGF3T	1565928407	394609512	COM+ Programming with Visual Basic: Developing COM+ Servers with COM, COM+, and .NET	Books	3	4	4	N	N	Not the most practical (especially at this moment in time)	Jose Mojica sets out at the beginning by saying that this is  not a `cookbook', that readers are expected to be familiar with the technology  already and that the goal is to look at the architecture behind terms such as  COM, COM+, MTS and DCOM; the real goal is to learn exactly how the technology  works under the bonnet.<br />The book is broadly split into 3 sections: COM, COM+ and  .NET. The latter only gets a chapter and is really just an introduction,  although a good one at that. The COM section includes 5 chapters looking at  interfaces, in- and out-of-process server activation and the infamous COM  versioning scheme. COM+ spans 4 chapters and while not all services are  described, transactional components and COM+ security are thoroughly covered as  well as writing and debugging COM+ components in VB. <br />The author overdoes it by telling us what he is going to tell  us, then telling us, and then telling us what he told us. Apart from the  repetition though, his writing is fairly easy to follow and it is evident that  he has a deep technical understanding of the topics covered.<br />Why read this book now that .NET is announced and is on its  way? Well, it is probably going to be a couple of years before service pack 1  for the .NET release and until then there is still a lot of COM(+) code to be  written. Even so, do we really need to know to such a detail how the technology  works behind the scenes in order to use it effectively from within VB? This is  not the place to answer that question, but if you think the answer is `yes' and  you work with Microsoft technologies, then you will enjoy reading `COM+  Programming with Visual Basic'.	2001-11-02
US	50369928	R1PNKH8J2U4PVA	1558605827	551887959	GUI Bloopers: Don'ts and Do's for Software Developers and Web Designers (Interactive Technologies)	Books	5	14	14	N	N	Most practical UI book I have read - excellent organisation	If your introduction to HCI was through one of the usual books by Hix, Dix, Schneiderman, Preece etc this book will come as a breath of fresh air. Unlike other books on the subject, this one is not academic and in fact it has one of the most practical approaches I have come across. Not groundbreaking like &quot;About Face&quot;, but certainly more useful to everyday developers.<br />After going through the theory in the first chapter, the author lists 82 GUI bloopers organised in logical sections, grouped under 7 chapters - thus making the book easily searchable. At first you might think that the book provides a few laughs at the expense of GUI screen shots from software applications publicly available. It certainly does that and it is very entertaining from that point of view, but that is just a side effect of the real value it offers.<br />Every blooper is described in terms of why it is wrong, accompanied with screen shot examples and reasons why a developer might have committed the mistake. It finishes off by describing the remedy to the blooper and providing GUI solutions for the screenshots that were 'named and shamed' earlier. The approach is very instructive but not overbearing.<br />Categories include GUI components, layout &amp; appearance, textual, interaction and responsiveness bloopers. Believe me: these are not extreme GUI errors that we never commit; read this book and prepare to be enlightened. It has earned a place on my reference shelf and I am already referring back to it every now and then. We are also using it as a checklist for UI products in Alpha/Beta development and for assisting in the production of a new in-house style guide.	2001-03-10
US	50369928	REZGY2RY2TIU0	0201708515	185730342	UML Components: A Simple Process for Specifying Component-Based Software	Books	4	18	19	N	N	Component Architects enjoy this feast!	Chapter 1 provides an excellent intro to defining what a component is. It also effectively establishes the language and terms that are used in the rest of the book.<br />The next chapter describes a development process including stages, activities within each stage and the inputs/outputs of each stage. The stages are: Requirements, Specification, Provisioning, Assembly, Test and Deployment. The focus of the book is the details of the Specification stage. We are shown what artefacts are created between substages of the specification stage and how to organise them in our UML tool. UML itself - or rather the subset to be used - is also described, along with a bunch of stereotypes together with the meaning of each (chapter 3).<br />At this stage, if you are thinking that you are interested in how to capture requirements for developing components OR that you would like to know the details of the `Provisioning' stage with detailed descriptions of how to map a design to both EJB and COM, you will be disappointed. The two areas just mentioned are only touched upon in chapter 4 and part of chapter 8. Also, if your UML tool is not flexible to cater for the various stereotypes and the means of organising them, then the material of the book will only satisfy academic interest. Academics will certainly be satisfied anyway, since the delivery of the various concepts is clean, thorough, complete and based on precise definitions firmly established with the reader (the presence of OCL and design by contract principles are no surprise).<br />The practitioners (mainly software architects) will only benefit if they do have the flexible UML tool and the development &amp; management environment that they operate in is very component focused and appreciates the importance of specifying component interfaces to the nth degree.  This development culture leaves the door open for reuse of the components in alternative environments than the one they were originally conceived for. It also contributes to the ability to evolve the component's implementation without ever disturbing the solid interfaces it exposes. If this is the environment you work in (or aspire to be part of), then you will find chapters 5-7 full of `gold' advice backed by a case study; they prescribe techniques for capturing and organising component identification, interaction and specification.butes to the ability to evolve the component's implementation without ever disturbing the solid interfaces it exposes. If this is the environment you work in (or aspire to be part of), then you will find chapters 5-7 full of `gold' advice backed by a case study; they prescribe techniques for capturing and organising component identification, interaction and specification.	2001-01-21
US	50369928	R1UHRUNAF9CHMO	0596000448	164294385	Designing Active Server Pages	Books	4	8	10	N	N	How to achieve reuse when writing scripts	It's all about reuse. The author's view is that, if duplication is eliminated (when building ASP pages), then good design is achieved. Hence the title of the book is justified. Nobody will find all the material new to them but there is certainly something in it for everyone.<br />The main approaches presented are server side includes, VBScript classes and using COM components. The concepts are revisited throughout the book, making it virtually impossible to miss the point. Included are examples of using Microsoft's components in addition to 3rd party components for common tasks, e.g. file handling, encryption, browser info etc.<br />What I personally enjoyed was that there is a lot of good VBScript code (loads of examples) to support the theory and there are numerous URL links for each topic touched upon; so the reader is never really left wanting more and not knowing where to go. If I have one gripe with the author, it is her confusion of terminology when it comes to describing COM classes, COM objects and COM components. Getting an understanding of these elsewhere and then revisiting this book is recommended.<br />Overall, well-written &amp; well-presented work from one of the founders of 4guysFromRolla.com	2000-11-30
US	50369928	R9Z0XKYRLLIER	0672320371	452357621	Presenting C# (Other Sams)	Books	4	5	5	N	N	Just a glimpse of the language but a good one at that	Be prepared for a small book. 12 short chapters spread over 190 pages (effectively A5 size) with a poor index. No depth at all on any of the issues, just a mere presentation on what's to come in a language not publicly available yet. In other words you get what is promised in the title: A presentation to C#, which is good.<br />C# is Microsoft's new language to be shipped with Visual Studio.NET. The author is primarily targeting C++ programmers, but does at times make considerations for non-C++ programmers reading his book. It should be noted that VB.NET (or VB7) has all the features that C# will have. So VB programmers will benefit from going through C#'s feature set; one way or another the principles are identical ? the syntax being the differentiator (that statement is 98% true).<br />Comparing C# to C++, the syntax is almost the same, there are no pointers and you can only write true OO code (in C++ you could always write just C). If this reminds you of Java, it should because as far as I could tell C# is Microsoft's Java. Any Java programmers can consider themselves C# programmers also. The differences have more to do with the .NET platform and all VS.NET developers will have to learn them.<br />The chapters that I found particularly useful were the ones describing how to write, configure and deploy C# components and also how to achieve interoperability between COM components and NGWS components. If you can?t wait for a developer?s guide to the language and environment, then get your hands on this book: it will only take you a day or two to read. It is not a reference or guide; rather it is a glorified, nicely presented whitepaper with very simple code examples.	2000-11-05
US	50369928	R2O4QP20TEJITK	1572319577	152838604	Microsoft Visual Basic Design Patterns (DV-MPS General)	Books	3	29	31	N	N	Very Good content. Bad style. Needs more Patterns. 3.5 stars	The author acknowledges Gamma et al for their brilliant `Design Patterns' book and recommends that we read it (there are 23 patterns described there). I could not agree more, as the introduction to patterns found there is far superior to the one in this book.<br />To take advantage of most design patters in VB, one has to tweak them a bit so as to cater for the lack of some OO features in the language. It is exactly that that this book aims to fulfil. Chapter 2 (30 pages) provides an excellent description of VB's OO limitations and how to overcome them. The main points are further reiterated as necessary while describing the patterns in chapters 4-14.<br />10 patterns are described, 7 taken/based on the Gamma (Adapter, Bridge, Proxy, Factory Method, Prototype, Singleton and State). The other 3 are: Object By Value (a serialisation pattern), Repository (persisting object state to a data store) and Event Service (alternative to the Event mechanism that is based on connectable objects). Although each pattern is described in detail, Stamatakis uses a derivative of OMT for class diagrams and his own notation for sequence diagrams; personally, I found his diagrams hard to follow and also inaccurate. In addition, his writing style proves his claim that he is a developer first and a writer second. On the upside, for each pattern he provides a mini application with code on CD, which is a great idea and very useful.<br />Finally, a good job was done at describing further insights on the effects of each pattern to COM components. There is good stuff in this book...if only the writing style and notation were friendlier...	2000-10-22
US	50369928	R11BC8821AJ1KP	1861002254	585018711	COM IDL and Interface Design	Books	4	8	8	N	N	COM IDL? Its all in here	This is definitely the COM IDL reference book. There aren't many books  devoted to the subject and most COM books focus on the technology from a  specific language perspective not spending any time on IDL itself. Frankly  I can't say that it has helped me a great deal with everyday development  but it certainly has made my understanding of a few things much clearer and  it has reinforced some ideas I had that I was not sure of. Like other  reviewers I did not find the other half of the book to be of great value  but it was interesting to compare (partial) implementations of the same  design in 5 different languages in the same book. My final praise is on the  excellent comparison of the various IDL types and how they map to the  various languages including a discussion/description of the ubiquitous  SAFEARRAY.	2000-07-18
US	50369928	RRXE2QDR8LQSN	1861000952	804127371	Clouds to Code	Books	3	6	8	N	N	Not really worth it in the end	This book tries to cover so much ground so it is destined not to succeed  in all areas. The technologies it covers are indeed all Microsoft  focused/centred and the case study described serves as a vehicle for  examining obstacles and how the author's team overcame them. However, the  solutions given are not anything out of the ordinary and no new ground is  broken - it is all common sense really or a case of back to basics. The  reason I rate this with 3 stars (besides the luck of a 2.5 stars option) is  because the first chapters have some basics on project management that are  not described in the usual boring style found in other books/courses. The  advice on e.g. how to prioritise deliverables or on planning a project is  very straightforward, easy to follow and to the point. This is a very  practical book but quite what audience it aims to satify remains unknown.	2000-07-18
US	50369928	R38TL6TF9V8RHP	0201615797	179417696	Developing Applications with Visual Basic and UML	Books	4	5	5	N	N	Ties many concepts together - UML + VB + Rose + COM +++	The theme here is 'process' and round-trip engineering using a tool  (Rose). Although it assumes knowledge of UML and Visual BASIC it spends  some time introducing its OO aspects and how UML maps to VB. The focus of  the book is the Synergy process that uses the UML notation and applied here  in VB. Personally I believe that each developer or team should have their  own process depending on the domain and type of project but nevertheless  there are some great techniques to borrow from Synergy and add them to your  own. In particular the discussion on use case analysis and the progression  to class design from that is very good. Weaved throughout the chapters is  the use of Rose for keeping code and design in synch so if you are not a  Rose fun this might get in the way. Worth noting is that the case study is  taken through the whole project life cycle stages and the climax is the  translation of the same code/design of a standalone system to run in MTS  and then a further iteration is described for giving the application an ASP  web interface - excellent stuff if you are interested in Microsoft's  component technologies.	2000-07-18
US	50369928	R9QM8CZ8XIIWA	0201310163	541796228	Visual Modeling With Rational Rose and Uml (Addison-Wesley Object Technology Series)	Books	2	6	7	N	N	Why read this when there are better books on the topic	If you have a good understanding of the UML (and even if you don't) this  book will not enhance your knowledge. The same applies for good modeling  techniques and/or OO concepts - the book doesn't teach these. Then again it  does not profess that it does so why blame it. The only reason I read this  book is because it came with the Rose copy we bought. Frankly, even as a  guide to Rose, it doesn't add much to what the (many) Rose manuals  describe. The only people that should read this book, in my humble opinion,  are those with a copy of Rose but without the manuals that come with it.	2000-07-18
US	50369928	R2N6WTC4KOWDCR	0201485672	532976631	Refactoring: Improving the Design of Existing Code	Books	5	38	42	N	N	Don't just read it - buy it	One can read good books on a specific technology (COM, UML etc) or on specific programming languages or even on different approaches to software  development (RUP, OPEN etc) but every now and then a true classic comes  along. Like Design Patterns 4 years ago now refactoring comes along. Every  serious OO developer should own both of these books. Get your hands on  Refactoring if only to read chapter 3, which summarises all the 'bad  smells' that may creep into code. 21 generic examples of what is bad  programming and why. The remainder of the book describes numerous  techniques (refactorings) for changing existing code in order to remove the  'smell'. Most refactorings are accompanied with some UML, which should be  enough to get the idea, and they are then further described in Java. What  makes this great a book is that it can be used as a reference very easily  since its design was well thought out for this purpose with a comprehensive  index and tables matching smells and respective refactorings. If any of  this rings a bell to CODE COMPLETE readers it should cause the ideas are  very similar but very much updated here. Fowler's writing style makes once  again for easy, pleasant reading. Unreservedly recommended.	2000-07-18
US	50369928	R3VGOEOK5LUJQH	1572319666	987652035	Programming Components with Microsoft Visual Basic 6.0 (Microsoft Programming Series)	Books	3	1	2	N	N	A lot of breadth not enough depth	The authors do well to explore a broad range of issues but never really get down to the nitty-gritty of it. However, it is easy reading and if you are a COM amateur you will benefit from the content. Personal opinion: Buy Pattison's book instead.	2000-03-24
US	50369928	R2X5YOIFG4P3KE	1562765760	902669278	Dan Appleman's Developing COM/ActiveX Components With Visual Basic 6	Books	3	4	11	N	N	Alternative title: COM for VB developers	This is a good book but its too long AND full of code listings I'd rather do without. However, if you are a VB expert and you have some very basic understanding of COM, then this book will take all the way.	2000-03-24
US	50369928	R3MMJOPRYQJOU1	1572313498	246073595	Inside Com (Microsoft Programming Series)	Books	4	1	2	N	N	Bad style good content	For a C++ developer wanting to understand COM all the information you need is in this one (for an even deeper look at things try Essential COM).	2000-03-24
US	50369928	R11SOZSUADOLL4	0201634465	659201350	Essential COM	Books	4	12	14	N	N	If are not a C++ expert look away now	Assuming you are a C++ expert and you want to learn about COM then this is the book for you. After you read it though, get a book on ATL to learn how to do COM with C++. This book (along with Inside COM) are fundamental to an understanding of COM from the C++ perspective but in reality you need ATL  to become productive.	2000-03-24
US	50369928	R1N4E9ANZPFRFL	1572319615	183830501	Programming Distributed Applications with Com and Microsoft Visual Basic 6.0 (Programming/Visual Basic)	Books	5	2	2	N	N	Every serious VB COM developer must read this	If your approach to COM from the VB perpsective is &quot;I know how to use it and I don't care how it works&quot; then DONT buy this book. However, if you do care on what VB does behind the scenes and do want to understand the COM architecture read it and spread the word. This book is excellent  (especially the chapters on interface design..).	2000-03-24
US	50369928	ROWFTMKSY9KEG	0136298419	793097877	Object-Oriented Modeling and Design	Books	5	22	24	N	N	One of the OO bibles	A landmark in OO literature: always was and always will be. Taking things from step zero to discussing very advanced issues. The notation used is the one where UML has borrowed most of its elements (especially the class diagrams). The process it describes has become the typical process for OO development (especially 2nd generation OMT as described through a series of articles in JOOP by Rumbaugh). In all, a book that leaves nothing uncovered from notation to process and more importantly in depth discussions on OO concepts and techniques that will always be true. Finally, this is one of the few books that discuss how to implement an OO design into a non-OO language such as C, Pascal, Fortran etc.  END	1999-09-16
US	50369928	R3PVV9MIWNUPNQ	0201325799	960796252	Real-Time UML: Developing Efficient Objects for Embedded Systems	Books	4	7	7	N	N	If you write embedded software go and buy this now	Simply stated the first book to devote itself to UML for real-time systems and the only author that does it. Although my background is not in the embedded world, this book introduced me to real-time systems, discussed the advantages in taking the OO approach to developing embedded systems and then explained the UML notation with the real-time extensions and a process for applying it. A MUST HAVE for every embedded developer.  END	1999-09-16
US	50369928	R3I71P7WAM3NE6	0201604590	89816065	The Rational Unified Process	Books	3	9	9	N	N	Good introduction/sales pitch to RUP	Having heard about the Rational Unified Process (RUP) and having seen diagrams that depict the process with all the funny terminology, I wanted to find out more without wasting too much time. This book delivered my wish. After reading just this book on the RUP you will have no better or worst understanding of UML (as it does not touch the subject) and you will not be able to apply a process to a real project (more reading elsewhere is required for that). Having said that, an understanding of the process and its terminology along with whether it would be applicable to your projects will be formed. If you are looking for a `helicopter' view on the RUP and nothing more, read this book.  END	1999-09-16
US	50369928	R2LMYSRL1HCXUY	0201310120	717546752	Objects, Components, and Frameworks with UML: The Catalysis(SM) Approach	Books	3	8	8	N	N	The method is great the book could be improved	Catalysis as a method is very powerful no doubt. Catalysis the book is a different story. I consider myself lucky in the respect that I had a subset of the method taught to me by people that have had some input to the Catalysis method (from University of Brighton, UK). I was also impressed by IS A RUNNING THROUGH EXAMPLE? A case study is desperately needed and it could easily replace some of the other material in the book. I know that if one can apply the techniques described in this book (not necessarily the full set) better more robust software will be the result. It is a shame that you need loads of time to get through the book. Given the choice I would have still bought this book but I believe there is area for improvement in the book not the method.  END	1999-09-16
US	50369928	R1Q68U8DJR7KRO	0201571684	31903393	The Unified Modeling Language User Guide (Addison-Wesley Object Technology Series)	Books	3	5	5	N	N	Could have been better	My feelings on this book are mixed. It is a large book for what it offers (almost 500 pages that take a lot of time to read) but it does provide a thorough introduction to UML. It also discusses some advanced modeling concepts and constructs (sections 3 &amp; 5) but it leaves the reader wanting to look elsewhere for how to apply these. There is an irritating duplication of material in different parts of the book, but I liked the appendices that included some of the standard elements of UML and a very brief summary of the Rational Unified Process.  If you have the (a lot of) time to read the book or you are one of the many fans of Booch's writings, then this book will be of value.	1999-09-16
US	50369928	RMMI5P1IT1E0Q	0201360675	356884890	Using UML : Software Engineering With Objects and Components	Books	3	10	10	N	N	Very good for STUDENTS	This book touches on all the right subjects but does not go -in my opinion- deep into any. I like the sequence in which the information is organised and presented. It is nice to include case studies, but I am not sure about the completeness of the case studies or if, in fact, these can be implemented from the design provided. It is a novelty to provide discussion topics very often throughout the text, but it would have been better, if not essential, to discuss the issues in the text or direct us to some other resource where the discussions take place. All in all, there are other books that do the job better of introducing UML or discussing advanced issues, but this text is probably the best to be used on an undergraduate course. Its value to software engineers in the industry, though, is questionable.	1999-09-16
US	50369928	R2JBCKYNZU2T0A	1565924487	56132163	UML in a Nutshell	Books	1	6	6	N	N	NEXT!	`UML in a nutshell' is a book I do not like. The terminology used deviates from what is commonly used in all other books on the subject. I disagree with the sequence in which the author presents the material and find his introduction to OO one of the worst ones I have ever come across. Trying to capture all of the UML in such a small book resulted in the book containing information that is only mentioned and not explored, leaving the reader confused rather than enthused. Finally, what does not help at all is the heavy use of bullet points throughout the book, which is a characteristic of the bad style this book is written in. I apologise to the author, maybe he is brilliant at what he does for a living (one never knows), but a technical writer he is not.  END	1999-09-16
US	50369928	RYMXQNIX4SHZH	020130998X	764994178	The Unified Modeling Language Reference Manual	Books	4	13	13	N	N	Power UML developer's companion	This book is by no means an introductory text. It assumes you already know UML. I do not think it would be of any value to managers or students. It is also of little value to developers that are happy downloading the 808 page UML specification and crunching through it. For the power UML engineer that needs to refer to the UML constructs, elements and semantics and discover new ones quickly when designing systems, this book will come in very handy indeed. Unlike other (valuable) UML books, this one will come down from the bookshelf often.	1999-09-16
US	50369928	R1GKRBNI4TB79T	0471191612	527765426	UML Toolkit (OMG)	Books	5	14	15	N	N	If you read 1 book on UML make it this one	When considering which UML book to buy it should be obvious that some complement each other depending on the skill level (novice, experienced) and background of the reader (student, software/embedded engineer, manager). However, having read more than 10 books on UML, I suggest that if you must only buy one book make it this one. There is no other book that real-time extensions, process for UML, design patterns, discussion on UML tools and a complete case study with implementation in Java. In addition, the accompanying CD amongst other things includes a demo version of Rational Rose 4.0. My only wish is that a second/updated version of the book comes out (covering UML 1.3, providing Rose 98i and correcting some of the inevitable mistakes that one finds in detailed books).  END	1999-09-16
US	50369928	R29SVK923TT135	020165783X	701144034	UML Distilled: A Brief Guide to the Standard Object Modeling Language (2nd Edition)	Books	5	12	13	N	N	THE best INTRODUCTION to UML	I read the first edition of this book `ages' ago and I was left very impressed and satisfied. Not only does it provide the briefest guide to UML that exists, but it is also very well written. With this book, one does not need to read a single sentence twice; one reads, comprehends and remembers the material on a single reading pass. I recommend this book to managers, developers and students alike that wish to be introduced to the UML.  Furthermore, this is the only book covering the OMG UML 1.3, but I am sure 1.3, but they were written before the approval of the OMG for version 1.3]	1999-09-16
US	50369928	RSIW4ZJM2FUCK	0201498375	2279857	Doing Hard Time: Developing Real-Time Systems with UML, Objects, Frameworks, and Patterns	Books	4	16	21	N	N	A must for the RT developer	Everything I have said for RT UML holds for this book also: a MUST HAVE for embedded developers. This book adds to the previous one from Douglass a lot of material (it definitely includes the material presented in that one) but the main advantage for me is the plethora of design patterns for real-time described. Since this is a very large book, it does not prove as easy to read through, but the additional material is definitely worth it.  Finally, another plus point is that the accompanying CD includes a lightweight demo of Rhapsody - the tool from I-Logix that amongst other things claims full code generation.  END	1999-09-16
