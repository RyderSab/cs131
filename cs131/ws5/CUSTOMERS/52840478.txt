US	52840478	R3MS5B9M52L3MX	0764595636	569254254	Professional DotNetNuke ASP.NET Portals	Books	1	9	28	N	Y	A Huge Disappointment	Two of us have been trying since 9:00 this morning to get DotNetNuke installed on a development server using the instructions in this book. It is now 9:00 in the evening. We aren't newbies, either--I have used SQL Server and ASP.Net for several years. During the course of our day, we discovered several outright errors is the installation chapter (for example, the wrong SQL Server password is shown in the Web.config example) and the web site for the book is woefully incomplete in its errata notes.<br /><br />I rarely give books single-star reviews, but this one is deserved. If a zero-star rating was available, that's what I'd give it.	2005-08-30
US	52840478	R3AHMXG7GQHLRI	1883249759	346565682	Mean-Variance Analysis in Portfolio Choice and Capital Markets	Books	4	13	14	N	Y	Not for the faint of heart	The bible on mean-variance optimization for portfolio selection. If you need to know the nuts and bolts of how to do MVO, this book has it. But be prepared to wade through some fairly advanced math. Theoretically, anyone with college Calculus and Matrix Operations should be able to make it through the math. But I can tell you from personal experience, it's pretty rough going. The text is written for mathematicians, so unless one is very comfortable with some fairly advanced matrix work, it can be very hard to follow what's going on.<br /><br />Peter Todd provides an implementation of Dr. Markowitz's algorithm in VBA. If you are a programmer, be prepared: The code was also written by a mathematician for mathematicians. If you don't understand the math behind the algorithm, you probably won't be able to decipher the code. And the code is complex enough that I doubt it could be copied by rote.<br /><br />With all that said, this really is an incredible book. It is ideal for a team comprised of a mathematician and a programmer who need to write an application to do MVO. We are using it as our primary reference in creating an 'efficient frontier' optimizer for use in investment software.	2005-05-26
US	52840478	R3HUNCFTQTJNI8	0486434753	411209561	A Profile of Mathematical Logic (Dover Books on Mathematics)	Books	5	64	65	N	Y	Oldie But Goodie	I first read this book in 1972 for a college course in the Philosophy of Mathematics. I was a philosophy major, mainly because I thought I was no good at math. By the end of the first chapter, I understood geometry for the first time. By the end of the second chapter, I was hooked. Mathematics has been a favorite hobby and occupation ever since.<br /><br />Unfortunately, my prized copy of this text was lost in a flood in 1982. So I am delighted that this reprint is available. If you enjoy math puzzles, if you are interested in G&ouml;del or non-Euclidian geometry, or if you simply want to stretch your mind a bit, I heartily recommend this book.	2005-01-27
US	52840478	R2E1U9I06QRAKV	0764541781	278817103	Photoshop CS Bible	Books	5	43	48	N	N	Lives Up to Its Name	I have struggled with Photoshop for years. Now mind you, I'm not a graphics professional, but I need good raster graphics for software and video projects that I produce.<br />As anyone who has picked up Photoshop can tell you, it's anything but intuitive. Incredibly powerful, but hardly something one can pick up by groping around. I slogged through the Photoshop Classroom In A Book when I tried Photoshop 6, and it was adequate, but not comprehensive enough.<br />A month ago, I decided to give Photoshop one more try, so I upgraded to Photosohop CS and bought this book. I love both the program and the book. Photosohp is still as unintuitive as ever, but McClelland's book does a nice job of explaining the basics and then providing walk-throughs for most of the tasks one would normally perform in Photoshop.<br />I put the book to the test compositing a photograph with a dingy gray sky to a shot of a blue sky with white, puffy clouds. The original photograph has large areas of sky showing through trees, and I had never been able to re-sky a picture that complex. Using masking and color range selections, I got the task done in about fifteen minutes flat. Needless to say, I was impressed. I'm beginning to understand why people get hooked on Photoshop.<br />If you're a novice to intermediate user, or if you are looking for a ready reference for tasks you don't perform very often, then this book is well worth a look. It has earned a prominent place on my bookshelf.	2004-07-17
US	52840478	R2Q6R932LEW0M5	0321193784	353075596	Adobe Premiere Pro Classroom in a Book	Books	2	22	22	N	Y	Not as good as others in the series	I was disappointed by this entry to the 'Classroom In A Book' series. I've used other members of the series, and I have generally found them to be a relatively quick and inexpensive way to climb up the learning curve for Adobe products.<br />Most of what the book teaches comes under the heading of 'Video Editing 101'-- what's a ripple edit, how do I lift frames, and so on. I can find most of this stuff pretty quickly in the User's Manual.<br />There is a lot of repetitive material in this book. I counted a half-dozen places where the book shows how to remove a gap in the timeline, even though it's a simple procedure.<br />Intermediate topics of the sort that I had hoped to find get less attention. Color correction only gets part of one chapter, and there's virtually nothing on Premiere's waveform monitor and vectorscope beyond how to open them. I'd really like to know how to read and use them!<br />Premiere's audio capabilities get their own chapter, but the Lesson on the CD-ROM doesn't match the chapter in the book. There were at least a half-dozen files needed by the chapter's project that Premiere couldn't find on the CD, rendering the chapter all but unusable.<br />When Premiere Pro comes out, I hope Adobe goes back to the drawing board on this volume. It needs a lot of work.	2004-06-26
US	52840478	R1WHM3BMP6U1PD	1590590457	316903074	User Interfaces in C#: Windows Forms and Custom Controls	Books	4	23	23	N	Y	Best book I've Seen on Winforms Programming	I am very tempted to give this book five stars, which I rarely do. It's that good.<br />I expected the usual run-through of forms and controls, but this book goes much deeper than that. Several chapters devote themselves to design issues in three-tier applications-- how to move information between a presentation layer and a business layer in an orderly, organized fashion. Since VS.Net is used so often for sloppy database front-ends, good advice has been hard to come by in this area.<br />So why only four stars? This book appears to be a port of an earler book covering the same issues within the context of VB.Net. That doesn't detract from the quality of its content, but the editors missed a few translations from VB to C#. These misses are pretty minor; for example, VB-style brackets are used on attributes (&lt;attribute&gt;, instead of [attribute]), and internal classes are described as being preceded by the 'Friend' keyword.<br />Subject to those minor qualifications, I would recommend this book to anyone who wants to learn how to program WinForms, and to anyone who wants to learn how to design a proper three-tier application in C#&gt;	2004-03-23
US	52840478	RBR90GIRP89NO	059600415X	703055592	Regular Expression Pocket Reference	Books	4	34	37	N	N	Great reference, but not a tutorial	The editorial blurb on this book suggests that it can be used as a tutorial by those new to regular expressions. That's not the case. This book is strictly a reference, albeit a very good one. I bought O'Reilly's &quot;Mastering Regular Expressions&quot; to learn the area, and I use this book as a quick reference. It serves that purpose very well.	2003-11-20
US	52840478	R1IF7XWJT0YBXO	0596002890	531420016	Mastering Regular Expressions, Second Edition	Books	5	1	1	N	N	Excellent Learning Tool	I have struggled with regular expressions for a couple of years now. Like most people, I knew 'something about them', and could cobble together a simple regex. But when it came to more demanding searches, I had to find the regex on the web, or I was out of luck.<br />This book guided me to the next level (at least). It is one of the better computer tutorials I have read in the past couple of years. If you are looking for a resource to learn regular expressions, this is the one I'd recommend.	2003-11-20
US	52840478	R208Z3A75YVK4T	0201710986	555752623	XML for the World Wide Web	Books	2	11	12	N	N	Not as Good as Castro's HTML Book	I had high hopes for this book, But I have come away disappointed. I used Castro's HTML book to learn that language, and I was favorably impressed. I found the examples in that book easy to walk through, and I felt they did a good job explaining basic concepts and procedures. I also liked the fact that Castro brought a designer's perspective to the subject.<br />Unfortunately, I can't say the same for this book. I have spent the better part of a day on its chapter on XSLT, and I don't feel like I have gotten a handle on the subject. I feel about the same way about XML schemas. I think XML may simply be a subject that requires a programmer's, rather than a designer's perspective.<br />The book could use a complete rewrite, particularly its walkthroughs, which I have had trouble following and making sense of. If you need to write style sheets, schemas, or anything else beyond the simplest XML, you are probably better served by another book.	2003-06-05
US	52840478	RS7JIOGK3ZGQT	0486411443	349374007	Patents and How to Get One: A Practical Handbook	Books	4	19	20	N	Y	A Good Introduction	This book offers a simple, straightforward interoduction to patent law. If you are starting from scratch, this is a good place to start. There isn't much &quot;how to&quot; in this book, so it's probably best for someone who plans to work with a patent lawyer or service.	2003-05-19
US	52840478	R2YKF3V37IR332	0201633612	141950023	Design Patterns: Elements of Reusable Object-Oriented Software	Books	5	10	12	N	Y	Excellent Reference	'Design Patterns' is so influential that its authours have become known as the &quot;Gang of Four&quot;. Look up &quot;GoF&quot; on Google and see how many hits are retuned!<br />This book deserves its reputation. It has a prominent place on my shelf, where I can reach it easily. That's because I use it a lot.<br />A note of caution: This book is definitely not a tutorial! I first tried using the book to learn patterns, and got nowhere. If you want to learn design patterns, I'd suggest Martin, &quot;Agile Software Development&quot;. It covers several key patterns and the principles that govern their use. Another great book on the subject is Fowler, &quot;Refactoring&quot;. This book shows how to first write code that works, then massage the working code into design patterns to increase its flexibility.	2003-05-19
US	52840478	R3Z285XKSNGG8	0873378016	931698041	Patent It Yourself	Books	4	145	155	N	Y	Good, But Be Careful!	I ordered this book to educate myself on the process of obtaining a patent. I don't plan on writing my own application--I believe pretty strongly that, even with a good book of this sort, self-filing is a very bad idea.<br />I know from some work that I have done that patents are regularly thrown out in court because of technical defects in their language. I am personally familiar with a case in which a major patent was overtuned because it misused insurance industry jargon. But if that's not enough to make your hair stand on end, consider this: Who is going to license or buy a do-it-yourself patent? Probably not Microsoft, GE or Ford.<br />So why am I buying this book? I suspect that the second major cause of patent failures is the inventor who turns the process over to a lawyer and isn't involved. I want to know the process so that I can be a more intelligent, actively involved client. I rely on my patent lawyer for his legal expertise, and he relies on my for my subject matter expertise. The better I understand the process, the easier it is for him to communicate with me.<br />'Patent It Yourself' is a good text to use for that purpose, even though it is aimed at do-it-yourselfers. If I know the process well enough that I could do it myself, then I know enough to work with an expert in the field, and to respect his or her expertise.	2003-05-19
US	52840478	RV6D4VTHU5ZW5	0201485672	532976631	Refactoring: Improving the Design of Existing Code	Books	5	20	21	N	N	Don't wait as long as I did	I've known about this book for over a year. Initially, I thought it was about re-engineering legacy systems. I don't do that, so I didn't give it much thought. Over the past year, I have stumbled across repeated references to this book. Everyone seems to cite it, and now I understand why.<br />It's very easy to fall into 'analysis paralysis' when doing object design. A commonly heard complaint is \\"I have created 27 different class diagrams, and 42 separate sequence diagrams, but I can't seem to get any code written...\\" XP's popularity is due, in part, becuase it get's you into action--you begin writing code immediately, instead of creating diagrams for weeks (or months) on end. XP's motto could be \\"just do it!\\"<br />But how does one reconcile this \\"code first, ask questions later\\" mentality with an acknowledged need to at least do some design work? In \\"Refactoring\\", Martin Fowler provides the answer. His prescription is to create some code to get something working, then look at the code to see how it might be improved-- refactor it.<br />In Fowler's view, you won't really understand the problem until you have coded it, so instead of spending the next three weeks trying to find the perfect pattern for your next task, forget the pattern, and get some code going. Once you've got something workable, then think about patterns you might back into from your existing code.<br />Of course, that's a gross oversimplification of the process, but it gives a flavor of the ready-fire-aim process that 'Refactoring' is built around. And it seems to work--even people who don't buy into other core practices of XP seem to have adopted refactoring as a central element in their process.<br />The catalog of refactorings that the books provides are a first class reference on how to clean up particular problems. But to me, the most valuable part of the book is its first fifty pages.<br />Fowler starts the book with a simple, but ugly, example, that he proceeds to refactor, step-by-step, into something rather elegant. If you like to learn principles first, you might want to read the second chapter before going through the example, but I found it a very valuable exercise. I recommend coding the example in your language of choice, then refactoring along with Fowler as you work through the example.<br />There is a temptation to relegate refactoring, like testing, to simply another development technique. But like testing, refactoring is at the core of a development philosophy: \\"I know I'm not going to get it right on my first pass, so I'll be satisfied with making it as right as I can. Having done that, I'll have a much better idea how to make it better, and I will. But time's a' wasting, so I need to get moving.\\"<br />This philosophy of continuous improvement allows the developer to get into action fairly quickly, and it reduces the risk of failure-by-delay. Fowler's book is a top-notch resource that will help the developer create more flexible code more quickly. I can recommend 'Refactoring'  without reservation.into something rather elegant. If you like to learn principles first, you might want to read the second chapter before going through the example, but I found it a very valuable exercise. I recommend coding the example in your language of choice, then refactoring along with Fowler as you work through the example.<br />There is a temptation to relegate refactoring, like testing, to simply another development technique. But like testing, refactoring is at the core of a development philosophy: \\"I know I'm not going to get it right on my first pass, so I'll be satisfied with making it as right as I can. Having done that, I'll have a much better idea how to make it better, and I will. But time's a' wasting, so I need to get moving.\\"<br />This philosophy of continuous improvement allows the developer to get into action fairly quickly, and it reduces the risk of failure-by-delay. Fowler's book is a top-notch resource that will help the developer create more flexible code more quickly. I can recommend 'Refactoring'  without reservation.	2003-05-13
US	52840478	R63CLUY8L8GJ5	0201844532	508319486	C# Design Patterns: A Tutorial	Books	4	14	29	N	Y	Good Introduction to C#	This book offers one of the better introductions to C# that I have come across. There are any number of C# introductions out there, but I have seen only one other book that shows how to do object-oriented programming (OOP) with C#.<br />OOP addreses one of the real shortcomings of C# and VS.Net--their Visual Basic heritage. Visual Basic was certainly easy to use; slap some controls on a form, add some code to the controls' event handlers, and you had yourself a working program. The problem is, this simplicity encouraged really ugly programs that couldn't be changed or extended. To use a house analogy, you couldn't simply repaint your kitchen. You had to tear it down and build a new one.<br />That's one of the main reasons why VB developed a reputation as a 'toy' language, and why 'real' programmers turned to Java in droves. It offers much of the simplicity of VB, but it encourages the creation of cohesive, loosely coupled objects that are easily extended, maintained, and reused.<br />C# has retained almost all of VB's simplicity, with predictable results. C# web sites are full of slapdash apps that whip up a few forms and plug in some code. C# is in real danger of becoming another toy.<br />And yet, C# offers a rich set of abstaction tools. With these tools, a developer can create real applications, in a fraction of the time required to do it in C++. The same language can be used to build junk, or really elegant applications.<br />The key to using C# effectively is OOP. The 'Gang of Four' (GoF) design patterns discussed in this book provide proven solutions to common OOP issues. If you understand the GoF patterns, you have a good understanding of OOP. It's that simple. And that's what Cooper sets out to provide.<br />In the first seven chapters of this book, Cooper does as good a job as I have seen of introducing C# and OOP. If you have no previous experience with OOP, you will probably need another book to get you started. I'd recommend 'Object Design' by Rebecca Wirfs-Brock. If you have been exposed to OOP, but you are not fully conversant with abstraction and its role in your designs, I strongly recommend 'Agile Software Development' by Bob Martin.<br />Those books will prepare you for Cooper's explanation and demonstration of the 23 GoF patterns. Cooper recommends getting the original GoF 'Design Patterns' book (Gamma et al) to use as a companion reference, and I think that's a good idea. What Cooper does best is describe how to implement the patterns in C#-- how to get from design to working code.<br />This book has been criticized for the style of its pattern implementations. Some reviewers consider them simple Java ports, and others have criticized the fact that they do not always use all the bells and whistles provided by C#. I agree that the implementations owe a lot to Java, and I might even go so far as to consider them ports.<br />And that, I think, is one of the book's great strengths. For it results in code that is highly portable between Java and C#. Even if you are married to C#, you will at some point have a client who is just as married to Java. Reusing your C# components is going to be a lot easier if you follow the sort of cross-platform style in this book. And if you are a Java programmer considering C#, it makes this book a great reference for migrating pattern-based solutions from Java to C#.<br />I have a few quibbles with the book, but these are mainly editorial. There are code listing typos, but apparently no web site with corrections. The UML editor provided on the CD-ROM to read its UML files doesn't seem to read them. And the UML editor is a much weaker editor than several other UML editors on the market. I would not consider it a top-tier product.<br />Subject to these reservations, I would strongly recommend this book to anyone learning C# and OOP. I wish it had been around a year an a half ago, when I was trying to learn both at the same time.Wirfs-Brock. If you have been exposed to OOP, but you are not fully conversant with abstraction and its role in your designs, I strongly recommend 'Agile Software Development' by Bob Martin. <br />Those books will prepare you for Cooper's explanation and demonstration of the 23 GoF patterns. Cooper recommends getting the original GoF 'Design Patterns' book (Gamma et al) to use as a companion reference, and I think that's a good idea. What Cooper does best is describe how to implement the patterns in C#-- how to get from design to working code.<br />This book has been criticized for the style of its pattern implementations. Some reviewers consider them simple Java ports, and others have criticized the fact that they do not always use all the bells and whistles provided by C#. I agree that the implementations owe a lot to Java, and I might even go so far as to consider them ports. <br />And that, I think, is one of the book's great strengths. For it results in code that is highly portable between Java and C#. Even if you are married to C#, you will at some point have a client who is just as married to Java. Reusing your C# components is going to be a lot easier if you follow the sort of cross-platform style in this book. And if you are a Java programmer considering C#, it makes this book a great reference for migrating pattern-based solutions from Java to C#.<br />I have a few quibbles with the book, but these are mainly editorial. There are code listing typos, but apparently no web site with corrections. The UML editor provided on the CD-ROM to read its UML files doesn't seem to read them. And the UML editor is a much weaker editor than several other UML editors on the market. I would not consider it a top-tier product.<br />Subject to these reservations, I would strongly recommend this book to anyone learning C# and OOP. I wish it had been around a year an a half ago, when I was trying to learn both at the same time.	2003-05-11
US	52840478	R1S3CRQAKXCFZO	0135974445	115656945	Agile Software Development, Principles, Patterns, and Practices	Books	5	94	99	N	N	If I Only Bought Two OOD Books, This Would be One of Them	I don't think I've given another design/programming book 5 stars before. This book deserves it-- it could easily replace a half dozen books on my shelf, and it probably will.<br />Martin focuses on the why's and the wherefores of current OOD methodologies. He doesn't try to sell Agile Processes in this book. Instead, he explains a number of current practices that might be loosely grouped under the 'Agile' name. He anchors his discussion in a set of principles that drive the design process. Then he shows how software patterns can be used to put these principles into practice.<br />Patterns are explained and demonstrated in the context of three case studies. The case studies (a payroll system, a weather monitoring system, and an exam testing system) have the feel of day-to-day problems. One of my chief complaints with other books has been the use of esoteric case studies-- unless I work for Microsoft, I'm not likely to write a word processor anytime soon. Okay, so maybe I won't write a weather station either, but it comes a lot closer to what I will do!<br />The patterns discussion in this book is down-to-earth and easily understood. I have struggled over the 'Gang of Four' book ('Gamma et Al, 'Design Patterns') for well over a year. Bob Martin's book has cut through a lot of the clutter and confusion. It has been a great help to me in understanding why, where, and when to use different patters. And the explanation of UML in the book's appendices is one of the best I have seen. I can't think of a better way to learn UML than to sit down with these Appendices and Martin Fowler's 'UML Distilled'.<br />This is one of the two books I would recommend to an OOD newbie. The other would be 'Object Design' by Rebecca Wirfs Brock and Alan McKean. These books provide a solid grounding in object-oriented design, while requiring a very reasonable expenditure of time and effort.	2003-04-01
US	52840478	R397M6SXG3ZK7P	1861007744	75564993	Professional Crystal Reports for Visual Studio .NET	Books	5	7	7	N	Y	The User's Manual for Crystal Reports	No muss, no fuss, just a short, straightforward exposition of Crystal Reports.Net and how to use it in Visual Studio.Net. This is a thin book (about 300 pages), but it covers both Windows Form reports and Web Form reports. The book won't change your life, but it will get you going on CR.Net. I recommend it strongly.	2003-03-05
US	52840478	RW92CV9X0YS5V	0201760312	220803982	An Introduction to Object-Oriented Programming (3rd Edition)	Books	5	24	24	N	Y	Great Introduction to OOP	I've read a number of introductions to object-oriented design and programming. This one is the best all-around introduction that I have seen. It starts in the real world, with a discussion of how one plans and organizes a task (sending flowers to a significant other) that requires more than a single person to get done. That's a pleasant change from texts that begin with Dauntingly Dry Definitions (&quot;encapsulation&quot;, &quot;inheritance&quot;, and my favorite, &quot;polymorphism&quot;).<br />To the author's credit, he avoids launching into inheritance until Chapter 8, by which time he has laid enough groundwork to reduce the concept to common sense. Other concepts are presented in a similar manner.<br />Note that this book is a survey book, not an in-depth programming manual. You won't learn C++ or Delphi, or any of the other half-dozen languages used for the book's examples. And the book focuses on concepts, rather than implementation. you won't learn how to implement a Singleton pattern in C#, although you will learn what it is and why it is useful. Finally, the book assumes familiarity with traditional, procedural programming. This is not a Programming 101 text.<br />I would recommend this book enthusiastically as a starting point for anyone making the transition from traditional programming to OOP. If you are moving to the DotNet platform, I have created a list (&quot;So you'd like to ... Transition to DotNet&quot;) with some other recommended texts.	2003-03-05
US	52840478	RYE4RZQ8QKXVO	1861006098	340272663	Beginning C# Databases	Books	5	11	11	N	N	Great Tutorial on Database Programming	This is one of the best database tutorials I have come across. I'm an old hand at using Microsoft Access (MS Jet) databases with Visual Basic, but I have struggled in the world of database servers. SQL Server has been a total mystery to me, even after reading (OK--trying to read) another book on SQL Server. It's not SQL that has stumped me; it's the transition from a simple Access file to a db server.<br />'Beginning C# Databases' addresses that need quite well. It begins with a walkthrough of the installation of MSDE (the personal version of SQL Server that ships with VS.Net). From there, it explains the VS.Net 'Server Explorer', which I had not been able to figure out. All of that was worth the price of the book for me, and it's all in the first chapter!<br />The book contains a pretty good tutorial on SQL. Old hands will probably want to skip it (nothing beyond SELECT, UPDATE, and DELETE), but if you're new to database programming, it's enough to get you started.<br />The treatment of ADO.Net is pretty conventional, but its coverage of beginner-to-intermediate topics (relationships, input validation, authentication, transactions) is quite good. I have moved myself from 'knowing enough to get it done' to 'knowing enough to do it pretty well'.<br />All-in-all, money well spent.	2003-02-12
US	52840478	RIZAGNEKMUMEZ	0201379430	415433951	Object Design: Roles, Responsibilities, and Collaborations	Books	5	50	50	N	N	Very Good Text on Object Design	I think I finally have a handle on object modeling-- 'Object Design' deserves a lot of the credit.<br />I have a shelf full of books on UML, uses cases, patterns, and modeling. I spent almost a year struggling through UML, trying to understand the nuances of sequence diagrams versus collaboration diagrams. Meanwhile, I felt no closer to being able to create serviceable object models for my projects.<br />Rebecca Wirfs-Brock and Alan McKean dispense with much of the tedious diagramming one usually associates with object modeling. Instead of charts and relationships, the book focuses on the roles, responsibilities, and behaviors that define an object. If you have ever assembled and managed employee teams, the framework will be very fmailiar. And that's where I found my breakthrough.<br />The book offers a good introduction to object modeling for those new to the area, and a solid reference for those looking to stremline their current methodology. The processes suggested by the authors are simple and flexible. But they are powerful enough to handle even complex designs.<br />One of the strongest pieces of advice in the book is to avoid rushing into UML software--stick with index cards until the design is fairly well developed. That's what got me out of a morass of charts and diagrams that looked nice, but did relatively little. I'd paraphrase the book's theme as &quot;Forget the formalism and focus on your application's responsibilities, and how those responsibilities can be allocated among cohesive, well-organized team players.:<br />The book is language neutral--it's focus is design, rather than programming. The design methodology taught in the book should be easily adaptable to nearly any object-oriented programming language.<br />I have no hesitation recommending Object Design to novice and intermediate object modelers. I rate is as the best book I have read on the design and modeling of object-oriented systems.	2003-01-23
US	52840478	R41IK0AITG8CM	0201730847	135218833	DHTML and CSS for the World Wide Web, Second Edition	Books	3	11	12	N	N	Very Good, Up To A Point	Jason Teague does a nice job of introducing CSS and its use with Java to create DHTML pages. Teague is stronger on design than programming, however, and that's where the book falls short.<br />JavaScript is the engine that makes DHTML work, but there is very little coverage of JavaScript basics in this book. Teague apparently assumes the reader knows basic JavaScript. So, he focuses his efforts on explaining the Document Object Model (DOM) that allows JavaScript to interact with web pages, and how to use the DOM to accomplish various tasks.<br />One shortcoming of the book is that it devotes inordinate attention to legacy web browser issues. At one time, there were three different DOMs (Microsoft, Netscape, and W3C, a standards organization). The current generation of browswers have fallen in line behind the W3C, and its DOM has emerged as the dominant model for DHTML pages. Teague spends many pages explaining how to address these legagy DOMs, which makes the discussion longer and more complicated than it really needs to be.<br />Be aware that Teague misuses the term 'DOM'. He talks of 'creating a DOM' every time one gets a reference to an object on an HTML page. The DOM is actually created by the browser when it loads the page. We access the DOM to get an object reference. I personally found Teague's use of the term very confusing, and that steepened the DHTML learning curve for me.<br />Teague's JavaScript code is very difficult to decipher, which is surprising in a book that is apparently targeted to web designers. One would expect simple, clear code that non-programmers could follow. Instead, the code violates a number of good programming practices--variable names are generally not descptive, and program logic is often knotted up in a tangle of nested 'if' statements. The drop-down menu code in Chapter 24 provides a good example of these problems.<br />But the biggest problem stems from a simple lack of formatting of the code. Teague prefers the older style of packing as many statements as possible on a single line--the code reads like a 'C' program from twenty years ago. In order to decipher the code, one must first unpack the lines to spread out the code, then apply proper indentation to figure out which 'else' statements are nested within which 'if' statements. That's a tedious, time-consuming, and very avoidable exercise.<br />I'd recommend this book for its exposition of CSS, and I'd give it a 'pretty good' rating for its handling of the DOM. But if you are diving into DHTML, use this book to get your feet wet. Then find a good JavaScript book to learn the ins and outs of manipulating the DOM and adding client-side interaction to your web pages.packing as many statements as possible on a single line--the code reads like a 'C' program from twenty years ago. In order to decipher the code, one must first unpack the lines to spread out the code, then apply proper indentation to figure out which 'else' statements are nested within which 'if' statements. That's a tedious, time-consuming, and very avoidable exercise.<br />I'd recommend this book for its exposition of CSS, and I'd give it a 'pretty good' rating for its handling of the DOM. But if you are diving into DHTML, use this book to get your feet wet. Then find a good JavaScript book to learn the ins and outs of manipulating the DOM and adding client-side interaction to your web pages.	2002-12-07
US	52840478	R18J95KR5NL4KV	0679424733	724452350	The Wealth of Nations (Modern Library)	Books	5	8	14	N	Y	Where did that description come from?	Talk about revisionist history! Adam Smith deeply suspicious of capitalism--a closet socialist? I don't think so!<br />Smith argues that even the darker impulses of the human mind generate benefit in a free society. If you want to get rich in a free society, the only way to do it is to come up with something incredibly useful to humankind.<br />Smith wasn't distrustful of capitalism--he was distrustful of statism and merchantalism, of government handouts and bureaucrats who know best. That was the order of the day in Smith's time. The government regulations for the French textile industry between 1666 and 1730 took up 2,000 pages.<br />*That's* what Smith was distrustful of, not capitalism!	2002-12-02
US	52840478	RZIVAE63NSKBV	1568843224	28636822	About Face: The Essentials of User Interface Design	Books	2	38	41	N	Y	Not worth its reputation	I'd heard about this book for years. Alan Cooper is widely regarded as the guru of interface design. After reading this book, I wonder why.<br />For one thing, he contradicts himself--a lot. On the one hand he complains that software tends to mimic the physical artifacts--for example, calendars are laid out on one-month grids. According to Cooper, this is a serious problem-- we are restricting a computerized calendar based on the limitations of the printed page. We should exploit the power of the PC. Then, not more than thirty pages later, he complains that computer file systems are deficient because they aren't centered around 'documents', which users know and love. We should restrict our file systems based on the limitations of the printed page. Be either fish or fowl; don't try to have it both ways.<br />I was very disappointed by this book. I expected insight, but what I got was Alan Cooper bitching about Windows. I knew what was wrong with Windows before I read the book. What I wanted was guidance on how to best interact with the user. I got Cooper's pet theories, most of which strike me as just plain silly.<br />Another reader described the book as &quot;incredibly arrogant&quot;. I'd have to agree. Save your money; I doubt this book would help you create better user interfaces.	2002-07-16
US	52840478	R3UMB1B6YK66YV	0201699699	615308119	Agile Software Development	Books	3	39	50	N	Y	Good, But Way Up In the Ivory Tower	This is a good book to read if you are thinking about going into business as a software design methodology consultant. But it may not be so good if you want to know the 'what' and 'why' of agile processes.<br />Much of the book is very abstract, which the author acknowledges in his introduction, and very 'touchy-feely'. I view several of its insights as cliches--\\"Software development is a cooperative game of invention and communication\\", and \\"programming teams are ecosystems\\" come to mind. I question whether these concepts are as groundbreaking as the author believes. Most managers learn them these days in basic training.<br />This book is basically about about how process methodologies are constructed. If you want to formalize or document your existing process, or modify a formal process in a very rigorous way, then this is a very useful book. But if you simply want to understand what agile processes are all about, this book will probably disappoint you.	2002-06-20
US	52840478	R3NQAJO9SNUT2Y	0130674826	334800920	A Practical Guide to eXtreme Programming	Books	4	1	2	N	Y	Exactly What The Title Says It Is	No muss, no fuss; just a straightforward exposition of what XP is, and what it is not. If you are wondering what all the fuss over XP is all about, this book won't disappoint you. XP is commonly characterized as &quot;Forget planning, just code!&quot; This book clarifies that misconception, and others. It is really directoed at answering the question &quot;How come XP projects don't collapse in chaos?&quot; After reading this book, XP didn't sound nearly as crazy as it does on the newsgroups.	2002-06-20
US	52840478	R1TAPY9IV41D6Q	0130668397	357867484	Streamlined Object Modeling: Patterns, Rules, and Implementation	Books	5	10	10	N	N	Great Tutorial for New Modelers	I'm relatively new to modeling and object programming. Up to this point, I have struggled to find objects and to develop their attributes and their relationships with other objects. This book has broken that barrier for me. It describes an intuitive set of patterns and rules for analyzing and modeling the business systems that form the basis of most software. The patterns are like pieces of an Erector set. Each one is simple; they are combined to form structures as complex as one needs. The rules describe how to combine the patterns. The Java prototypes are straightforward and easily implemented, providing a complete framework for development. If you are just starting out in modeling, I would recommend UML Distilled for an overview of UML and this book for a tutorial on how to use it. I'm moving a lot of other modeling and pattern books to the back room-- I think this book will be my primary modeling resource for the forseeable future.	2002-06-01
US	52840478	R3LXSOC5QKM5LM	076453582X	434173366	FrontPage 2002 Bible	Books	3	16	17	N	N	Good book, but watch out for errors	This book generally lives up to its reputation. It has good coverage of FrontPage from the basics to fairly advanced techniques involving databases, client-side scripting, and ASP scripting. I found most of the answers I have been looking for to build better webs with FrontPage.<br />I would have rated this book higher if I had been more impressed with its Web support sites. For example, Tutorial 20-2 has an error in the onSubmit event handler. That's okay, so long as I can download a correction from the Web. But the data file on the authors' and publisher's support sites not only fails to correct the error, but the code in the file doesn't match the tutorial in the book. That's a weak feature of an otherwise good book.	2002-04-14
US	52840478	R13LWJADYBXJ6J	0735615683	444148946	Oop with Microsoft Visual Basic .Net and Microsoft Visual C# .Net Step by Step (Step by Step (Microsoft))	Books	5	53	54	N	N	Excellent for VBers moving to DotNet	This book is an excellent tutorial for VBers who are moving to DotNet and who want to break all the bad habits picked up over the years. I have, by the way, just described myself. The book does a very good job bringing object theory down to earth and showing how to implement objects in both VB.Net and C#.<br />If you are new to objects, this book will show you why object programmers swear by the approach--it really does make it easier to write scalable, reusable code. It also helps the developer avoid the \\"house of cards\\" syndrome as a program grows beyond its original scope.<br />If you have had plenty of object theory, but struggle to translate objects to code, this book will get you over the hump. Examples show how to implement inheritance, acggregation, and association.<br />I would recommend starting with this book, then reading Rosenberg, \\"Use Case Driven Object Modeling With UML\\", which teaches an object-oriented development process. Fowler, \\"UML Distilled\\" is another great text. Finally, dig into Gamma et al (the \\"Gang of Four\\"), \\"Design Patterns\\". These books really will change the way you code.<br />Postscript: Having worked through the examples in the first half of the book, I continue to be impressed. Reynolds-Haertle does a very nice job of illustrating most of the constructs one uses to get day-to-day jobs done. For example, she includes several examples of collections built with the .Net ArrayList construct. Later, she shows an example of a collection built with a Dictionary construct, and discusses benefits and drawbacks of each type. If you are a VBer who (like me) is somewhat bewildered by the collection classes in .Net, this book does a very nice job sorting them out.	2002-02-19
US	52840478	R1A2Z55ZVAV29O	0201571684	31903393	The Unified Modeling Language User Guide (Addison-Wesley Object Technology Series)	Books	5	6	9	N	N	Very Good Introduction to UML	This is one of the best tutorials I have seen for the UML novice. It is one of two books I would recommend, the other being Fowler's &quot;UML Distilled&quot;. That book presents a bare-bones guide; this one is a lengthier tutorial, with more on the why's and wherefore's of UML.	2002-02-17
US	52840478	RN391KBW9W4N8	0130925691	576001953	Applying UML and Patterns: An Introduction to Object-Oriented Analysis and Design and the Unified Process (2nd Edition)	Books	5	70	75	N	Y	Great Introduction To OO Analysis and Design	This book is the best introduction I have seen to object-oriented analysis and design. It explains the 'Unified Process' of analysis and design, including UML and the use of patterns. I am a big fan of this book because it emphasizes the &quot;why&quot;--the reason for each element of the process from a business perspective. For example, instead of simply offering a recipe for writing use cases, the book talks about why one might include or exclude specific elements to achieve specific objectives.<br />Those (like me) who have avoided Unified Process because it looks too rigid, bureaucratic, and form-laden will love this book. The author argues convincingly that UP is best implemented in an iterative process that looks more like Extreme Programming than the cumbersome waterfall process one typically associates with UP. Then the book shows how to implement a UP process in enough detail, with enough examples, and with enough flexibility, that a project leader can readily put this form of UP into practice.<br />I have avoided UP for years, but this book may have made a convert out of me. It's the first book I have seen that makes an effective business case for UP and presents a practical guide to its implementation. I have no hesitation recommending it to anyone, from novice project leaders to seasoned software architects.	2001-12-21
US	52840478	R1P15BXKG2Y9I7	0764508148	774122212	C# For Dummies	Books	4	11	12	N	N	Good Book for VB Migrators	C# For Dummies claims to take novice programmers into the world of C#. That's probably a stretch--if you haven't programmed before, I suspect you would have a tough time keeping up. But as an experienced VB programmer moving to C#, I have found it quite helpful. Easy, breezy read, with a focus on the language itself (rather than .Net framework classes or Visual Studio). Most programs are console apps, although the book walks the reader through creation of a Windows app. Only negatives: Code on CD doesn't always match up with cook listings (as at p. 261). Also, like most Dummies books, it's a bit light on learning exercises for the reader. I'm using the book as a general introduction to the language, before I dig into more detailed texts.	2001-12-19
US	52840478	RT10X71E45JZN	0672320711	412159056	Sams Teach Yourself C# in 21 Days	Books	5	9	9	N	Y	Good Tutorial on C#	Like most of the 21 Day books, this one does a good job taking the reader through the basic aspects of its subject matter. The book says it's written for novice programmers-- I'd take that with a grain of salt. If you haven't programmed before, C# can be a difficult place to start, and this book won't really make it much easier. But if you have had experience with VBA in Excel or other programs, or if you are in an experienced VB programmer, this book will ease you into C# without undue difficulty. Lots of quizzes and exercises, so you can check your progress as you go along and apply what you are learning. Only one chapter on the .Net Framework, and only one on Web programming, but these topics are dense enough that you would probably want a separate book on each topic. So, one can't really fault Jones for only touvhing lightly here. Two chapters on WinForms and Windows applications, with the rest of the text focused mainly on console apps to demonstrate the language.	2001-12-19
US	52840478	R197T789CCONME	0486262588	329067733	An Illustrated Guide to Linear Programming	Books	3	9	11	N	Y	Good, but a reprint from 1970	This book presents a good conceptual overview of linear programming, geared for the non-mathmatical person. However, it is a reprint of a 1970 title, so there isn't much on the use of computers to solve this type of problem.	2001-08-03
US	52840478	R1ULBJZOUTZX3X	1861004877	455768068	C# Programming with the Public Beta	Books	4	0	0	N	N	Good resource for C++ and VB Programmers	&quot;C# Programming with the Public Beta&quot; provides a good overview on the new DotNet framework and the C# language. The reader should have a good background in object-oriented programming to get the most from this book. VB programmers will still find a few rough spots. For example, the discussion of inheritance goes into the &quot;how&quot;, but not the &quot;why&quot;. If you haven't used inheritance before (VB6 doesn't have it), you may find yourself saying &quot;I understand what I can do and how to do it. But what benefits does it offer me as a programmer?&quot; You will have to get that elsewhere. Other than that, this book is a good resource for VB programmers making a transition to C#. C++ and Java programmers should have no problems at all.	2001-04-27
US	52840478	R2PVBWGC6RPMVE	1570713375	27739379	Social Security Benefits Handbook (Social Security Benefits Handbook, 2nd ed)	Books	5	19	21	N	Y	Good Reference on Basic Law and Procedures	Tomkiel has written a good reference for non-lawyers on the basics of Social Security law and how it is administered. It goes into some detail, so if you are looking for something light and breezy, it may be a bit much. But if you want to know what benefits are available, who is eligible for them, and how they are calculated, this book will fill the bill nicely.	2000-12-19
US	52840478	R27WBQVQNRM2SH	037550317X	389338120	When Genius Failed: The Rise and Fall of Long-Term Capital Management	Books	3	5	6	N	N	Fascinating, But Flawed	Lowenstein presents a fascinating study of the rise and fall of Long Term Capital Management, but unfortunately his study is flawed in a couple of respects.<br />First, he seems to be in over his head in trying to understand the models he describes. For example, he doesn't seem to have a firm grasp on the statistical analysis that drives financial models. And he completely misses the distinction between long- term capital growth models and short-term trading models.<br />Long-term models, which predict market behavior over a decade or more, actually work quite well. For example, Roger Ibbotson used one such model in the 1970s to predict a Dow of 10,000 by 1999. On the other hand, short-term trading models have generally been viewed with some disdain by the academic community. And it is these models that LTCM lived (and died) by.<br />The second flaw is that Lowenstein appears to bring a set of preconceptions to the table in his account of LTCM. His thesis seems to be that financial models don't work, and that the failure of LTCM proves his point. A more thoughtful thesis would highlight the hubris of LTCM, and of Wall Street in general. Academics generally dismissed LTCM from the beginning-- most viewed its investment strategies as simple gambling. Yet, at the same time, LTCM was the darling of Wall Street. How could the Street miss the danger signals that were so obvious to the academic community?<br />Lowenstein's biases about financial modeling ultimately reduce the book to an argument, rather than a study. It is entertaining, but not terribly enlightening.	2000-12-09
US	52840478	R3AN0SC3O1I7G5	0782127452	681151661	VB/VBA Developer's Guide to the Windows Installer	Books	3	10	10	N	Y	Good General Info, But Short on How-To	This book provides good general information about the new Windows Installer, but it's weak on examples and how-to information. Only one chapter (Chapter 7) provides examples of the steps involved in using the  Installer, and those examples are limited to modifying an existing .msi  file, not creating one.<br />The author promises a complete walk-through in  Chapter 12, but it's not there. Instead, the chapter offers an overview of  various installers (InstallShield, Visual Studio, and Wise). But again,  there are no examples.<br />Many developers are trying to figure out how to  incorporate various Microsoft technologies, such as MDAC, into Windows  Installer files. The book suggests using a custom action, but doesn't  provide a step-by-step example of how to do it. This alone would have made  the book worth its price.	2000-05-29
